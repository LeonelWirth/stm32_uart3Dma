
stm32 _uart3DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d48  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08001e54  08001e54  00011e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e7c  08001e7c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001e7c  08001e7c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e7c  08001e7c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e7c  08001e7c  00011e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e80  08001e80  00011e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001e84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  08001e90  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08001e90  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005c20  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014c0  00000000  00000000  00025c55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000680  00000000  00000000  00027118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000608  00000000  00000000  00027798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015ecf  00000000  00000000  00027da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006e06  00000000  00000000  0003dc6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e222  00000000  00000000  00044a75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c2c97  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001918  00000000  00000000  000c2cec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001e3c 	.word	0x08001e3c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001e3c 	.word	0x08001e3c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 f9f2 	bl	8000538 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f810 	bl	8000178 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f89c 	bl	8000294 <MX_GPIO_Init>
  MX_DMA_Init();
 800015c:	f000 f87c 	bl	8000258 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000160:	f000 f850 	bl	8000204 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&huart3, bufDMA, sizeof(bufDMA));
 8000164:	220a      	movs	r2, #10
 8000166:	4902      	ldr	r1, [pc, #8]	; (8000170 <main+0x24>)
 8000168:	4802      	ldr	r0, [pc, #8]	; (8000174 <main+0x28>)
 800016a:	f001 fbc0 	bl	80018ee <HAL_UART_Receive_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800016e:	e7fe      	b.n	800016e <main+0x22>
 8000170:	20000028 	.word	0x20000028
 8000174:	20000078 	.word	0x20000078

08000178 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b090      	sub	sp, #64	; 0x40
 800017c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800017e:	f107 0318 	add.w	r3, r7, #24
 8000182:	2228      	movs	r2, #40	; 0x28
 8000184:	2100      	movs	r1, #0
 8000186:	4618      	mov	r0, r3
 8000188:	f001 fe50 	bl	8001e2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800018c:	1d3b      	adds	r3, r7, #4
 800018e:	2200      	movs	r2, #0
 8000190:	601a      	str	r2, [r3, #0]
 8000192:	605a      	str	r2, [r3, #4]
 8000194:	609a      	str	r2, [r3, #8]
 8000196:	60da      	str	r2, [r3, #12]
 8000198:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800019a:	2301      	movs	r3, #1
 800019c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800019e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001a4:	2300      	movs	r3, #0
 80001a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a8:	2301      	movs	r3, #1
 80001aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ac:	2302      	movs	r3, #2
 80001ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001b6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001bc:	f107 0318 	add.w	r3, r7, #24
 80001c0:	4618      	mov	r0, r3
 80001c2:	f000 fe9b 	bl	8000efc <HAL_RCC_OscConfig>
 80001c6:	4603      	mov	r3, r0
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d001      	beq.n	80001d0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001cc:	f000 f8a8 	bl	8000320 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001d0:	230f      	movs	r3, #15
 80001d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001d4:	2302      	movs	r3, #2
 80001d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d8:	2300      	movs	r3, #0
 80001da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e2:	2300      	movs	r3, #0
 80001e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001e6:	1d3b      	adds	r3, r7, #4
 80001e8:	2102      	movs	r1, #2
 80001ea:	4618      	mov	r0, r3
 80001ec:	f001 f906 	bl	80013fc <HAL_RCC_ClockConfig>
 80001f0:	4603      	mov	r3, r0
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d001      	beq.n	80001fa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80001f6:	f000 f893 	bl	8000320 <Error_Handler>
  }
}
 80001fa:	bf00      	nop
 80001fc:	3740      	adds	r7, #64	; 0x40
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}
	...

08000204 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000208:	4b11      	ldr	r3, [pc, #68]	; (8000250 <MX_USART3_UART_Init+0x4c>)
 800020a:	4a12      	ldr	r2, [pc, #72]	; (8000254 <MX_USART3_UART_Init+0x50>)
 800020c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800020e:	4b10      	ldr	r3, [pc, #64]	; (8000250 <MX_USART3_UART_Init+0x4c>)
 8000210:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000214:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000216:	4b0e      	ldr	r3, [pc, #56]	; (8000250 <MX_USART3_UART_Init+0x4c>)
 8000218:	2200      	movs	r2, #0
 800021a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800021c:	4b0c      	ldr	r3, [pc, #48]	; (8000250 <MX_USART3_UART_Init+0x4c>)
 800021e:	2200      	movs	r2, #0
 8000220:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000222:	4b0b      	ldr	r3, [pc, #44]	; (8000250 <MX_USART3_UART_Init+0x4c>)
 8000224:	2200      	movs	r2, #0
 8000226:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000228:	4b09      	ldr	r3, [pc, #36]	; (8000250 <MX_USART3_UART_Init+0x4c>)
 800022a:	220c      	movs	r2, #12
 800022c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800022e:	4b08      	ldr	r3, [pc, #32]	; (8000250 <MX_USART3_UART_Init+0x4c>)
 8000230:	2200      	movs	r2, #0
 8000232:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000234:	4b06      	ldr	r3, [pc, #24]	; (8000250 <MX_USART3_UART_Init+0x4c>)
 8000236:	2200      	movs	r2, #0
 8000238:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800023a:	4805      	ldr	r0, [pc, #20]	; (8000250 <MX_USART3_UART_Init+0x4c>)
 800023c:	f001 fa78 	bl	8001730 <HAL_UART_Init>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d001      	beq.n	800024a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000246:	f000 f86b 	bl	8000320 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800024a:	bf00      	nop
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	20000078 	.word	0x20000078
 8000254:	40004800 	.word	0x40004800

08000258 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800025e:	4b0c      	ldr	r3, [pc, #48]	; (8000290 <MX_DMA_Init+0x38>)
 8000260:	695b      	ldr	r3, [r3, #20]
 8000262:	4a0b      	ldr	r2, [pc, #44]	; (8000290 <MX_DMA_Init+0x38>)
 8000264:	f043 0301 	orr.w	r3, r3, #1
 8000268:	6153      	str	r3, [r2, #20]
 800026a:	4b09      	ldr	r3, [pc, #36]	; (8000290 <MX_DMA_Init+0x38>)
 800026c:	695b      	ldr	r3, [r3, #20]
 800026e:	f003 0301 	and.w	r3, r3, #1
 8000272:	607b      	str	r3, [r7, #4]
 8000274:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000276:	2200      	movs	r2, #0
 8000278:	2100      	movs	r1, #0
 800027a:	200d      	movs	r0, #13
 800027c:	f000 fa95 	bl	80007aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000280:	200d      	movs	r0, #13
 8000282:	f000 faae 	bl	80007e2 <HAL_NVIC_EnableIRQ>

}
 8000286:	bf00      	nop
 8000288:	3708      	adds	r7, #8
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	40021000 	.word	0x40021000

08000294 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000294:	b480      	push	{r7}
 8000296:	b085      	sub	sp, #20
 8000298:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800029a:	4b14      	ldr	r3, [pc, #80]	; (80002ec <MX_GPIO_Init+0x58>)
 800029c:	699b      	ldr	r3, [r3, #24]
 800029e:	4a13      	ldr	r2, [pc, #76]	; (80002ec <MX_GPIO_Init+0x58>)
 80002a0:	f043 0320 	orr.w	r3, r3, #32
 80002a4:	6193      	str	r3, [r2, #24]
 80002a6:	4b11      	ldr	r3, [pc, #68]	; (80002ec <MX_GPIO_Init+0x58>)
 80002a8:	699b      	ldr	r3, [r3, #24]
 80002aa:	f003 0320 	and.w	r3, r3, #32
 80002ae:	60fb      	str	r3, [r7, #12]
 80002b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002b2:	4b0e      	ldr	r3, [pc, #56]	; (80002ec <MX_GPIO_Init+0x58>)
 80002b4:	699b      	ldr	r3, [r3, #24]
 80002b6:	4a0d      	ldr	r2, [pc, #52]	; (80002ec <MX_GPIO_Init+0x58>)
 80002b8:	f043 0308 	orr.w	r3, r3, #8
 80002bc:	6193      	str	r3, [r2, #24]
 80002be:	4b0b      	ldr	r3, [pc, #44]	; (80002ec <MX_GPIO_Init+0x58>)
 80002c0:	699b      	ldr	r3, [r3, #24]
 80002c2:	f003 0308 	and.w	r3, r3, #8
 80002c6:	60bb      	str	r3, [r7, #8]
 80002c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ca:	4b08      	ldr	r3, [pc, #32]	; (80002ec <MX_GPIO_Init+0x58>)
 80002cc:	699b      	ldr	r3, [r3, #24]
 80002ce:	4a07      	ldr	r2, [pc, #28]	; (80002ec <MX_GPIO_Init+0x58>)
 80002d0:	f043 0304 	orr.w	r3, r3, #4
 80002d4:	6193      	str	r3, [r2, #24]
 80002d6:	4b05      	ldr	r3, [pc, #20]	; (80002ec <MX_GPIO_Init+0x58>)
 80002d8:	699b      	ldr	r3, [r3, #24]
 80002da:	f003 0304 	and.w	r3, r3, #4
 80002de:	607b      	str	r3, [r7, #4]
 80002e0:	687b      	ldr	r3, [r7, #4]

}
 80002e2:	bf00      	nop
 80002e4:	3714      	adds	r7, #20
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bc80      	pop	{r7}
 80002ea:	4770      	bx	lr
 80002ec:	40021000 	.word	0x40021000

080002f0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) // Callback que e ejecuta cuando se completo una recepcion
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, bufDMA, sizeof(bufDMA), 100); // Reenvio lo que recibi para comprobar
 80002f8:	2364      	movs	r3, #100	; 0x64
 80002fa:	220a      	movs	r2, #10
 80002fc:	4906      	ldr	r1, [pc, #24]	; (8000318 <HAL_UART_RxCpltCallback+0x28>)
 80002fe:	4807      	ldr	r0, [pc, #28]	; (800031c <HAL_UART_RxCpltCallback+0x2c>)
 8000300:	f001 fa63 	bl	80017ca <HAL_UART_Transmit>
    HAL_UART_Receive_DMA(&huart3, bufDMA, sizeof(bufDMA)); // Vuelvo a iniciar la recepcion por DMA
 8000304:	220a      	movs	r2, #10
 8000306:	4904      	ldr	r1, [pc, #16]	; (8000318 <HAL_UART_RxCpltCallback+0x28>)
 8000308:	4804      	ldr	r0, [pc, #16]	; (800031c <HAL_UART_RxCpltCallback+0x2c>)
 800030a:	f001 faf0 	bl	80018ee <HAL_UART_Receive_DMA>
}
 800030e:	bf00      	nop
 8000310:	3708      	adds	r7, #8
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	20000028 	.word	0x20000028
 800031c:	20000078 	.word	0x20000078

08000320 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000324:	b672      	cpsid	i
}
 8000326:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000328:	e7fe      	b.n	8000328 <Error_Handler+0x8>
	...

0800032c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800032c:	b480      	push	{r7}
 800032e:	b085      	sub	sp, #20
 8000330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000332:	4b15      	ldr	r3, [pc, #84]	; (8000388 <HAL_MspInit+0x5c>)
 8000334:	699b      	ldr	r3, [r3, #24]
 8000336:	4a14      	ldr	r2, [pc, #80]	; (8000388 <HAL_MspInit+0x5c>)
 8000338:	f043 0301 	orr.w	r3, r3, #1
 800033c:	6193      	str	r3, [r2, #24]
 800033e:	4b12      	ldr	r3, [pc, #72]	; (8000388 <HAL_MspInit+0x5c>)
 8000340:	699b      	ldr	r3, [r3, #24]
 8000342:	f003 0301 	and.w	r3, r3, #1
 8000346:	60bb      	str	r3, [r7, #8]
 8000348:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800034a:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <HAL_MspInit+0x5c>)
 800034c:	69db      	ldr	r3, [r3, #28]
 800034e:	4a0e      	ldr	r2, [pc, #56]	; (8000388 <HAL_MspInit+0x5c>)
 8000350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000354:	61d3      	str	r3, [r2, #28]
 8000356:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <HAL_MspInit+0x5c>)
 8000358:	69db      	ldr	r3, [r3, #28]
 800035a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800035e:	607b      	str	r3, [r7, #4]
 8000360:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000362:	4b0a      	ldr	r3, [pc, #40]	; (800038c <HAL_MspInit+0x60>)
 8000364:	685b      	ldr	r3, [r3, #4]
 8000366:	60fb      	str	r3, [r7, #12]
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800036e:	60fb      	str	r3, [r7, #12]
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000376:	60fb      	str	r3, [r7, #12]
 8000378:	4a04      	ldr	r2, [pc, #16]	; (800038c <HAL_MspInit+0x60>)
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800037e:	bf00      	nop
 8000380:	3714      	adds	r7, #20
 8000382:	46bd      	mov	sp, r7
 8000384:	bc80      	pop	{r7}
 8000386:	4770      	bx	lr
 8000388:	40021000 	.word	0x40021000
 800038c:	40010000 	.word	0x40010000

08000390 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b088      	sub	sp, #32
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000398:	f107 0310 	add.w	r3, r7, #16
 800039c:	2200      	movs	r2, #0
 800039e:	601a      	str	r2, [r3, #0]
 80003a0:	605a      	str	r2, [r3, #4]
 80003a2:	609a      	str	r2, [r3, #8]
 80003a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	4a2f      	ldr	r2, [pc, #188]	; (8000468 <HAL_UART_MspInit+0xd8>)
 80003ac:	4293      	cmp	r3, r2
 80003ae:	d157      	bne.n	8000460 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80003b0:	4b2e      	ldr	r3, [pc, #184]	; (800046c <HAL_UART_MspInit+0xdc>)
 80003b2:	69db      	ldr	r3, [r3, #28]
 80003b4:	4a2d      	ldr	r2, [pc, #180]	; (800046c <HAL_UART_MspInit+0xdc>)
 80003b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003ba:	61d3      	str	r3, [r2, #28]
 80003bc:	4b2b      	ldr	r3, [pc, #172]	; (800046c <HAL_UART_MspInit+0xdc>)
 80003be:	69db      	ldr	r3, [r3, #28]
 80003c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80003c4:	60fb      	str	r3, [r7, #12]
 80003c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003c8:	4b28      	ldr	r3, [pc, #160]	; (800046c <HAL_UART_MspInit+0xdc>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	4a27      	ldr	r2, [pc, #156]	; (800046c <HAL_UART_MspInit+0xdc>)
 80003ce:	f043 0308 	orr.w	r3, r3, #8
 80003d2:	6193      	str	r3, [r2, #24]
 80003d4:	4b25      	ldr	r3, [pc, #148]	; (800046c <HAL_UART_MspInit+0xdc>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	f003 0308 	and.w	r3, r3, #8
 80003dc:	60bb      	str	r3, [r7, #8]
 80003de:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80003e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003e6:	2302      	movs	r3, #2
 80003e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003ea:	2303      	movs	r3, #3
 80003ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003ee:	f107 0310 	add.w	r3, r7, #16
 80003f2:	4619      	mov	r1, r3
 80003f4:	481e      	ldr	r0, [pc, #120]	; (8000470 <HAL_UART_MspInit+0xe0>)
 80003f6:	f000 fbfd 	bl	8000bf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80003fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80003fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000400:	2300      	movs	r3, #0
 8000402:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000404:	2300      	movs	r3, #0
 8000406:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000408:	f107 0310 	add.w	r3, r7, #16
 800040c:	4619      	mov	r1, r3
 800040e:	4818      	ldr	r0, [pc, #96]	; (8000470 <HAL_UART_MspInit+0xe0>)
 8000410:	f000 fbf0 	bl	8000bf4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8000414:	4b17      	ldr	r3, [pc, #92]	; (8000474 <HAL_UART_MspInit+0xe4>)
 8000416:	4a18      	ldr	r2, [pc, #96]	; (8000478 <HAL_UART_MspInit+0xe8>)
 8000418:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800041a:	4b16      	ldr	r3, [pc, #88]	; (8000474 <HAL_UART_MspInit+0xe4>)
 800041c:	2200      	movs	r2, #0
 800041e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000420:	4b14      	ldr	r3, [pc, #80]	; (8000474 <HAL_UART_MspInit+0xe4>)
 8000422:	2200      	movs	r2, #0
 8000424:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000426:	4b13      	ldr	r3, [pc, #76]	; (8000474 <HAL_UART_MspInit+0xe4>)
 8000428:	2280      	movs	r2, #128	; 0x80
 800042a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800042c:	4b11      	ldr	r3, [pc, #68]	; (8000474 <HAL_UART_MspInit+0xe4>)
 800042e:	2200      	movs	r2, #0
 8000430:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000432:	4b10      	ldr	r3, [pc, #64]	; (8000474 <HAL_UART_MspInit+0xe4>)
 8000434:	2200      	movs	r2, #0
 8000436:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000438:	4b0e      	ldr	r3, [pc, #56]	; (8000474 <HAL_UART_MspInit+0xe4>)
 800043a:	2200      	movs	r2, #0
 800043c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800043e:	4b0d      	ldr	r3, [pc, #52]	; (8000474 <HAL_UART_MspInit+0xe4>)
 8000440:	2200      	movs	r2, #0
 8000442:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000444:	480b      	ldr	r0, [pc, #44]	; (8000474 <HAL_UART_MspInit+0xe4>)
 8000446:	f000 f9e7 	bl	8000818 <HAL_DMA_Init>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000450:	f7ff ff66 	bl	8000320 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	4a07      	ldr	r2, [pc, #28]	; (8000474 <HAL_UART_MspInit+0xe4>)
 8000458:	639a      	str	r2, [r3, #56]	; 0x38
 800045a:	4a06      	ldr	r2, [pc, #24]	; (8000474 <HAL_UART_MspInit+0xe4>)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000460:	bf00      	nop
 8000462:	3720      	adds	r7, #32
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	40004800 	.word	0x40004800
 800046c:	40021000 	.word	0x40021000
 8000470:	40010c00 	.word	0x40010c00
 8000474:	20000034 	.word	0x20000034
 8000478:	40020030 	.word	0x40020030

0800047c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000480:	e7fe      	b.n	8000480 <NMI_Handler+0x4>

08000482 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000482:	b480      	push	{r7}
 8000484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000486:	e7fe      	b.n	8000486 <HardFault_Handler+0x4>

08000488 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800048c:	e7fe      	b.n	800048c <MemManage_Handler+0x4>

0800048e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800048e:	b480      	push	{r7}
 8000490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000492:	e7fe      	b.n	8000492 <BusFault_Handler+0x4>

08000494 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000498:	e7fe      	b.n	8000498 <UsageFault_Handler+0x4>

0800049a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800049a:	b480      	push	{r7}
 800049c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800049e:	bf00      	nop
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bc80      	pop	{r7}
 80004a4:	4770      	bx	lr

080004a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004a6:	b480      	push	{r7}
 80004a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004aa:	bf00      	nop
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bc80      	pop	{r7}
 80004b0:	4770      	bx	lr

080004b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004b2:	b480      	push	{r7}
 80004b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004b6:	bf00      	nop
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bc80      	pop	{r7}
 80004bc:	4770      	bx	lr

080004be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004be:	b580      	push	{r7, lr}
 80004c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004c2:	f000 f87f 	bl	80005c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
	...

080004cc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80004d0:	4802      	ldr	r0, [pc, #8]	; (80004dc <DMA1_Channel3_IRQHandler+0x10>)
 80004d2:	f000 fa5b 	bl	800098c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80004d6:	bf00      	nop
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	20000034 	.word	0x20000034

080004e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004e4:	bf00      	nop
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bc80      	pop	{r7}
 80004ea:	4770      	bx	lr

080004ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004ec:	480c      	ldr	r0, [pc, #48]	; (8000520 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80004ee:	490d      	ldr	r1, [pc, #52]	; (8000524 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80004f0:	4a0d      	ldr	r2, [pc, #52]	; (8000528 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80004f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004f4:	e002      	b.n	80004fc <LoopCopyDataInit>

080004f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004fa:	3304      	adds	r3, #4

080004fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000500:	d3f9      	bcc.n	80004f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000502:	4a0a      	ldr	r2, [pc, #40]	; (800052c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000504:	4c0a      	ldr	r4, [pc, #40]	; (8000530 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000506:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000508:	e001      	b.n	800050e <LoopFillZerobss>

0800050a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800050a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800050c:	3204      	adds	r2, #4

0800050e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800050e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000510:	d3fb      	bcc.n	800050a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000512:	f7ff ffe5 	bl	80004e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000516:	f001 fc65 	bl	8001de4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800051a:	f7ff fe17 	bl	800014c <main>
  bx lr
 800051e:	4770      	bx	lr
  ldr r0, =_sdata
 8000520:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000524:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000528:	08001e84 	.word	0x08001e84
  ldr r2, =_sbss
 800052c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000530:	200000c0 	.word	0x200000c0

08000534 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000534:	e7fe      	b.n	8000534 <ADC1_2_IRQHandler>
	...

08000538 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800053c:	4b08      	ldr	r3, [pc, #32]	; (8000560 <HAL_Init+0x28>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a07      	ldr	r2, [pc, #28]	; (8000560 <HAL_Init+0x28>)
 8000542:	f043 0310 	orr.w	r3, r3, #16
 8000546:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000548:	2003      	movs	r0, #3
 800054a:	f000 f923 	bl	8000794 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800054e:	200f      	movs	r0, #15
 8000550:	f000 f808 	bl	8000564 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000554:	f7ff feea 	bl	800032c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000558:	2300      	movs	r3, #0
}
 800055a:	4618      	mov	r0, r3
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40022000 	.word	0x40022000

08000564 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800056c:	4b12      	ldr	r3, [pc, #72]	; (80005b8 <HAL_InitTick+0x54>)
 800056e:	681a      	ldr	r2, [r3, #0]
 8000570:	4b12      	ldr	r3, [pc, #72]	; (80005bc <HAL_InitTick+0x58>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	4619      	mov	r1, r3
 8000576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800057a:	fbb3 f3f1 	udiv	r3, r3, r1
 800057e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000582:	4618      	mov	r0, r3
 8000584:	f000 f93b 	bl	80007fe <HAL_SYSTICK_Config>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800058e:	2301      	movs	r3, #1
 8000590:	e00e      	b.n	80005b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	2b0f      	cmp	r3, #15
 8000596:	d80a      	bhi.n	80005ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000598:	2200      	movs	r2, #0
 800059a:	6879      	ldr	r1, [r7, #4]
 800059c:	f04f 30ff 	mov.w	r0, #4294967295
 80005a0:	f000 f903 	bl	80007aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005a4:	4a06      	ldr	r2, [pc, #24]	; (80005c0 <HAL_InitTick+0x5c>)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005aa:	2300      	movs	r3, #0
 80005ac:	e000      	b.n	80005b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005ae:	2301      	movs	r3, #1
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20000000 	.word	0x20000000
 80005bc:	20000008 	.word	0x20000008
 80005c0:	20000004 	.word	0x20000004

080005c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005c8:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <HAL_IncTick+0x1c>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	461a      	mov	r2, r3
 80005ce:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <HAL_IncTick+0x20>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4413      	add	r3, r2
 80005d4:	4a03      	ldr	r2, [pc, #12]	; (80005e4 <HAL_IncTick+0x20>)
 80005d6:	6013      	str	r3, [r2, #0]
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	bc80      	pop	{r7}
 80005de:	4770      	bx	lr
 80005e0:	20000008 	.word	0x20000008
 80005e4:	200000bc 	.word	0x200000bc

080005e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  return uwTick;
 80005ec:	4b02      	ldr	r3, [pc, #8]	; (80005f8 <HAL_GetTick+0x10>)
 80005ee:	681b      	ldr	r3, [r3, #0]
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bc80      	pop	{r7}
 80005f6:	4770      	bx	lr
 80005f8:	200000bc 	.word	0x200000bc

080005fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	f003 0307 	and.w	r3, r3, #7
 800060a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <__NVIC_SetPriorityGrouping+0x44>)
 800060e:	68db      	ldr	r3, [r3, #12]
 8000610:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000612:	68ba      	ldr	r2, [r7, #8]
 8000614:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000618:	4013      	ands	r3, r2
 800061a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000624:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800062c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800062e:	4a04      	ldr	r2, [pc, #16]	; (8000640 <__NVIC_SetPriorityGrouping+0x44>)
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	60d3      	str	r3, [r2, #12]
}
 8000634:	bf00      	nop
 8000636:	3714      	adds	r7, #20
 8000638:	46bd      	mov	sp, r7
 800063a:	bc80      	pop	{r7}
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	e000ed00 	.word	0xe000ed00

08000644 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000648:	4b04      	ldr	r3, [pc, #16]	; (800065c <__NVIC_GetPriorityGrouping+0x18>)
 800064a:	68db      	ldr	r3, [r3, #12]
 800064c:	0a1b      	lsrs	r3, r3, #8
 800064e:	f003 0307 	and.w	r3, r3, #7
}
 8000652:	4618      	mov	r0, r3
 8000654:	46bd      	mov	sp, r7
 8000656:	bc80      	pop	{r7}
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	e000ed00 	.word	0xe000ed00

08000660 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800066a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066e:	2b00      	cmp	r3, #0
 8000670:	db0b      	blt.n	800068a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	f003 021f 	and.w	r2, r3, #31
 8000678:	4906      	ldr	r1, [pc, #24]	; (8000694 <__NVIC_EnableIRQ+0x34>)
 800067a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067e:	095b      	lsrs	r3, r3, #5
 8000680:	2001      	movs	r0, #1
 8000682:	fa00 f202 	lsl.w	r2, r0, r2
 8000686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800068a:	bf00      	nop
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	bc80      	pop	{r7}
 8000692:	4770      	bx	lr
 8000694:	e000e100 	.word	0xe000e100

08000698 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	6039      	str	r1, [r7, #0]
 80006a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	db0a      	blt.n	80006c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	b2da      	uxtb	r2, r3
 80006b0:	490c      	ldr	r1, [pc, #48]	; (80006e4 <__NVIC_SetPriority+0x4c>)
 80006b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b6:	0112      	lsls	r2, r2, #4
 80006b8:	b2d2      	uxtb	r2, r2
 80006ba:	440b      	add	r3, r1
 80006bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006c0:	e00a      	b.n	80006d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	4908      	ldr	r1, [pc, #32]	; (80006e8 <__NVIC_SetPriority+0x50>)
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	f003 030f 	and.w	r3, r3, #15
 80006ce:	3b04      	subs	r3, #4
 80006d0:	0112      	lsls	r2, r2, #4
 80006d2:	b2d2      	uxtb	r2, r2
 80006d4:	440b      	add	r3, r1
 80006d6:	761a      	strb	r2, [r3, #24]
}
 80006d8:	bf00      	nop
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	bc80      	pop	{r7}
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	e000e100 	.word	0xe000e100
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b089      	sub	sp, #36	; 0x24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	f003 0307 	and.w	r3, r3, #7
 80006fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000700:	69fb      	ldr	r3, [r7, #28]
 8000702:	f1c3 0307 	rsb	r3, r3, #7
 8000706:	2b04      	cmp	r3, #4
 8000708:	bf28      	it	cs
 800070a:	2304      	movcs	r3, #4
 800070c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3304      	adds	r3, #4
 8000712:	2b06      	cmp	r3, #6
 8000714:	d902      	bls.n	800071c <NVIC_EncodePriority+0x30>
 8000716:	69fb      	ldr	r3, [r7, #28]
 8000718:	3b03      	subs	r3, #3
 800071a:	e000      	b.n	800071e <NVIC_EncodePriority+0x32>
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000720:	f04f 32ff 	mov.w	r2, #4294967295
 8000724:	69bb      	ldr	r3, [r7, #24]
 8000726:	fa02 f303 	lsl.w	r3, r2, r3
 800072a:	43da      	mvns	r2, r3
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	401a      	ands	r2, r3
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000734:	f04f 31ff 	mov.w	r1, #4294967295
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	fa01 f303 	lsl.w	r3, r1, r3
 800073e:	43d9      	mvns	r1, r3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000744:	4313      	orrs	r3, r2
         );
}
 8000746:	4618      	mov	r0, r3
 8000748:	3724      	adds	r7, #36	; 0x24
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr

08000750 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	3b01      	subs	r3, #1
 800075c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000760:	d301      	bcc.n	8000766 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000762:	2301      	movs	r3, #1
 8000764:	e00f      	b.n	8000786 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000766:	4a0a      	ldr	r2, [pc, #40]	; (8000790 <SysTick_Config+0x40>)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	3b01      	subs	r3, #1
 800076c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800076e:	210f      	movs	r1, #15
 8000770:	f04f 30ff 	mov.w	r0, #4294967295
 8000774:	f7ff ff90 	bl	8000698 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000778:	4b05      	ldr	r3, [pc, #20]	; (8000790 <SysTick_Config+0x40>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800077e:	4b04      	ldr	r3, [pc, #16]	; (8000790 <SysTick_Config+0x40>)
 8000780:	2207      	movs	r2, #7
 8000782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000784:	2300      	movs	r3, #0
}
 8000786:	4618      	mov	r0, r3
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	e000e010 	.word	0xe000e010

08000794 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f7ff ff2d 	bl	80005fc <__NVIC_SetPriorityGrouping>
}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b086      	sub	sp, #24
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	4603      	mov	r3, r0
 80007b2:	60b9      	str	r1, [r7, #8]
 80007b4:	607a      	str	r2, [r7, #4]
 80007b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007bc:	f7ff ff42 	bl	8000644 <__NVIC_GetPriorityGrouping>
 80007c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	68b9      	ldr	r1, [r7, #8]
 80007c6:	6978      	ldr	r0, [r7, #20]
 80007c8:	f7ff ff90 	bl	80006ec <NVIC_EncodePriority>
 80007cc:	4602      	mov	r2, r0
 80007ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007d2:	4611      	mov	r1, r2
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff ff5f 	bl	8000698 <__NVIC_SetPriority>
}
 80007da:	bf00      	nop
 80007dc:	3718      	adds	r7, #24
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b082      	sub	sp, #8
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	4603      	mov	r3, r0
 80007ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff ff35 	bl	8000660 <__NVIC_EnableIRQ>
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b082      	sub	sp, #8
 8000802:	af00      	add	r7, sp, #0
 8000804:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f7ff ffa2 	bl	8000750 <SysTick_Config>
 800080c:	4603      	mov	r3, r0
}
 800080e:	4618      	mov	r0, r3
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
	...

08000818 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000818:	b480      	push	{r7}
 800081a:	b085      	sub	sp, #20
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000820:	2300      	movs	r3, #0
 8000822:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d101      	bne.n	800082e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800082a:	2301      	movs	r3, #1
 800082c:	e043      	b.n	80008b6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	461a      	mov	r2, r3
 8000834:	4b22      	ldr	r3, [pc, #136]	; (80008c0 <HAL_DMA_Init+0xa8>)
 8000836:	4413      	add	r3, r2
 8000838:	4a22      	ldr	r2, [pc, #136]	; (80008c4 <HAL_DMA_Init+0xac>)
 800083a:	fba2 2303 	umull	r2, r3, r2, r3
 800083e:	091b      	lsrs	r3, r3, #4
 8000840:	009a      	lsls	r2, r3, #2
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4a1f      	ldr	r2, [pc, #124]	; (80008c8 <HAL_DMA_Init+0xb0>)
 800084a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2202      	movs	r2, #2
 8000850:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000862:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000866:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000870:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	68db      	ldr	r3, [r3, #12]
 8000876:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800087c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	695b      	ldr	r3, [r3, #20]
 8000882:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000888:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	69db      	ldr	r3, [r3, #28]
 800088e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000890:	68fa      	ldr	r2, [r7, #12]
 8000892:	4313      	orrs	r3, r2
 8000894:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	68fa      	ldr	r2, [r7, #12]
 800089c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	2200      	movs	r2, #0
 80008a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2201      	movs	r2, #1
 80008a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	2200      	movs	r2, #0
 80008b0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80008b4:	2300      	movs	r3, #0
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3714      	adds	r7, #20
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr
 80008c0:	bffdfff8 	.word	0xbffdfff8
 80008c4:	cccccccd 	.word	0xcccccccd
 80008c8:	40020000 	.word	0x40020000

080008cc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	60b9      	str	r1, [r7, #8]
 80008d6:	607a      	str	r2, [r7, #4]
 80008d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80008da:	2300      	movs	r3, #0
 80008dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d101      	bne.n	80008ec <HAL_DMA_Start_IT+0x20>
 80008e8:	2302      	movs	r3, #2
 80008ea:	e04a      	b.n	8000982 <HAL_DMA_Start_IT+0xb6>
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	2201      	movs	r2, #1
 80008f0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d13a      	bne.n	8000974 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	2202      	movs	r2, #2
 8000902:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	2200      	movs	r2, #0
 800090a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	f022 0201 	bic.w	r2, r2, #1
 800091a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	68b9      	ldr	r1, [r7, #8]
 8000922:	68f8      	ldr	r0, [r7, #12]
 8000924:	f000 f938 	bl	8000b98 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800092c:	2b00      	cmp	r3, #0
 800092e:	d008      	beq.n	8000942 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f042 020e 	orr.w	r2, r2, #14
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	e00f      	b.n	8000962 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f022 0204 	bic.w	r2, r2, #4
 8000950:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f042 020a 	orr.w	r2, r2, #10
 8000960:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f042 0201 	orr.w	r2, r2, #1
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	e005      	b.n	8000980 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	2200      	movs	r2, #0
 8000978:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800097c:	2302      	movs	r3, #2
 800097e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000980:	7dfb      	ldrb	r3, [r7, #23]
}
 8000982:	4618      	mov	r0, r3
 8000984:	3718      	adds	r7, #24
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
	...

0800098c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a8:	2204      	movs	r2, #4
 80009aa:	409a      	lsls	r2, r3
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	4013      	ands	r3, r2
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d04f      	beq.n	8000a54 <HAL_DMA_IRQHandler+0xc8>
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	f003 0304 	and.w	r3, r3, #4
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d04a      	beq.n	8000a54 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f003 0320 	and.w	r3, r3, #32
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d107      	bne.n	80009dc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f022 0204 	bic.w	r2, r2, #4
 80009da:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a66      	ldr	r2, [pc, #408]	; (8000b7c <HAL_DMA_IRQHandler+0x1f0>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d029      	beq.n	8000a3a <HAL_DMA_IRQHandler+0xae>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a65      	ldr	r2, [pc, #404]	; (8000b80 <HAL_DMA_IRQHandler+0x1f4>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d022      	beq.n	8000a36 <HAL_DMA_IRQHandler+0xaa>
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a63      	ldr	r2, [pc, #396]	; (8000b84 <HAL_DMA_IRQHandler+0x1f8>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d01a      	beq.n	8000a30 <HAL_DMA_IRQHandler+0xa4>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a62      	ldr	r2, [pc, #392]	; (8000b88 <HAL_DMA_IRQHandler+0x1fc>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d012      	beq.n	8000a2a <HAL_DMA_IRQHandler+0x9e>
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a60      	ldr	r2, [pc, #384]	; (8000b8c <HAL_DMA_IRQHandler+0x200>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d00a      	beq.n	8000a24 <HAL_DMA_IRQHandler+0x98>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a5f      	ldr	r2, [pc, #380]	; (8000b90 <HAL_DMA_IRQHandler+0x204>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d102      	bne.n	8000a1e <HAL_DMA_IRQHandler+0x92>
 8000a18:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a1c:	e00e      	b.n	8000a3c <HAL_DMA_IRQHandler+0xb0>
 8000a1e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000a22:	e00b      	b.n	8000a3c <HAL_DMA_IRQHandler+0xb0>
 8000a24:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000a28:	e008      	b.n	8000a3c <HAL_DMA_IRQHandler+0xb0>
 8000a2a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a2e:	e005      	b.n	8000a3c <HAL_DMA_IRQHandler+0xb0>
 8000a30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a34:	e002      	b.n	8000a3c <HAL_DMA_IRQHandler+0xb0>
 8000a36:	2340      	movs	r3, #64	; 0x40
 8000a38:	e000      	b.n	8000a3c <HAL_DMA_IRQHandler+0xb0>
 8000a3a:	2304      	movs	r3, #4
 8000a3c:	4a55      	ldr	r2, [pc, #340]	; (8000b94 <HAL_DMA_IRQHandler+0x208>)
 8000a3e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	f000 8094 	beq.w	8000b72 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000a52:	e08e      	b.n	8000b72 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a58:	2202      	movs	r2, #2
 8000a5a:	409a      	lsls	r2, r3
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	4013      	ands	r3, r2
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d056      	beq.n	8000b12 <HAL_DMA_IRQHandler+0x186>
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	f003 0302 	and.w	r3, r3, #2
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d051      	beq.n	8000b12 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f003 0320 	and.w	r3, r3, #32
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d10b      	bne.n	8000a94 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f022 020a 	bic.w	r2, r2, #10
 8000a8a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2201      	movs	r2, #1
 8000a90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a38      	ldr	r2, [pc, #224]	; (8000b7c <HAL_DMA_IRQHandler+0x1f0>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d029      	beq.n	8000af2 <HAL_DMA_IRQHandler+0x166>
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a37      	ldr	r2, [pc, #220]	; (8000b80 <HAL_DMA_IRQHandler+0x1f4>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d022      	beq.n	8000aee <HAL_DMA_IRQHandler+0x162>
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a35      	ldr	r2, [pc, #212]	; (8000b84 <HAL_DMA_IRQHandler+0x1f8>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d01a      	beq.n	8000ae8 <HAL_DMA_IRQHandler+0x15c>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a34      	ldr	r2, [pc, #208]	; (8000b88 <HAL_DMA_IRQHandler+0x1fc>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d012      	beq.n	8000ae2 <HAL_DMA_IRQHandler+0x156>
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a32      	ldr	r2, [pc, #200]	; (8000b8c <HAL_DMA_IRQHandler+0x200>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d00a      	beq.n	8000adc <HAL_DMA_IRQHandler+0x150>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a31      	ldr	r2, [pc, #196]	; (8000b90 <HAL_DMA_IRQHandler+0x204>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d102      	bne.n	8000ad6 <HAL_DMA_IRQHandler+0x14a>
 8000ad0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000ad4:	e00e      	b.n	8000af4 <HAL_DMA_IRQHandler+0x168>
 8000ad6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ada:	e00b      	b.n	8000af4 <HAL_DMA_IRQHandler+0x168>
 8000adc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ae0:	e008      	b.n	8000af4 <HAL_DMA_IRQHandler+0x168>
 8000ae2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ae6:	e005      	b.n	8000af4 <HAL_DMA_IRQHandler+0x168>
 8000ae8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aec:	e002      	b.n	8000af4 <HAL_DMA_IRQHandler+0x168>
 8000aee:	2320      	movs	r3, #32
 8000af0:	e000      	b.n	8000af4 <HAL_DMA_IRQHandler+0x168>
 8000af2:	2302      	movs	r3, #2
 8000af4:	4a27      	ldr	r2, [pc, #156]	; (8000b94 <HAL_DMA_IRQHandler+0x208>)
 8000af6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2200      	movs	r2, #0
 8000afc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d034      	beq.n	8000b72 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000b10:	e02f      	b.n	8000b72 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	2208      	movs	r2, #8
 8000b18:	409a      	lsls	r2, r3
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d028      	beq.n	8000b74 <HAL_DMA_IRQHandler+0x1e8>
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	f003 0308 	and.w	r3, r3, #8
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d023      	beq.n	8000b74 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f022 020e 	bic.w	r2, r2, #14
 8000b3a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b44:	2101      	movs	r1, #1
 8000b46:	fa01 f202 	lsl.w	r2, r1, r2
 8000b4a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2201      	movs	r2, #1
 8000b50:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2201      	movs	r2, #1
 8000b56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d004      	beq.n	8000b74 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	4798      	blx	r3
    }
  }
  return;
 8000b72:	bf00      	nop
 8000b74:	bf00      	nop
}
 8000b76:	3710      	adds	r7, #16
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40020008 	.word	0x40020008
 8000b80:	4002001c 	.word	0x4002001c
 8000b84:	40020030 	.word	0x40020030
 8000b88:	40020044 	.word	0x40020044
 8000b8c:	40020058 	.word	0x40020058
 8000b90:	4002006c 	.word	0x4002006c
 8000b94:	40020000 	.word	0x40020000

08000b98 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
 8000ba4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bae:	2101      	movs	r1, #1
 8000bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8000bb4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	683a      	ldr	r2, [r7, #0]
 8000bbc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	2b10      	cmp	r3, #16
 8000bc4:	d108      	bne.n	8000bd8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	68ba      	ldr	r2, [r7, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000bd6:	e007      	b.n	8000be8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	68ba      	ldr	r2, [r7, #8]
 8000bde:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	687a      	ldr	r2, [r7, #4]
 8000be6:	60da      	str	r2, [r3, #12]
}
 8000be8:	bf00      	nop
 8000bea:	3714      	adds	r7, #20
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr
	...

08000bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b08b      	sub	sp, #44	; 0x2c
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c02:	2300      	movs	r3, #0
 8000c04:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c06:	e169      	b.n	8000edc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c10:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	69fa      	ldr	r2, [r7, #28]
 8000c18:	4013      	ands	r3, r2
 8000c1a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c1c:	69ba      	ldr	r2, [r7, #24]
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	f040 8158 	bne.w	8000ed6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	4a9a      	ldr	r2, [pc, #616]	; (8000e94 <HAL_GPIO_Init+0x2a0>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d05e      	beq.n	8000cee <HAL_GPIO_Init+0xfa>
 8000c30:	4a98      	ldr	r2, [pc, #608]	; (8000e94 <HAL_GPIO_Init+0x2a0>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d875      	bhi.n	8000d22 <HAL_GPIO_Init+0x12e>
 8000c36:	4a98      	ldr	r2, [pc, #608]	; (8000e98 <HAL_GPIO_Init+0x2a4>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d058      	beq.n	8000cee <HAL_GPIO_Init+0xfa>
 8000c3c:	4a96      	ldr	r2, [pc, #600]	; (8000e98 <HAL_GPIO_Init+0x2a4>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d86f      	bhi.n	8000d22 <HAL_GPIO_Init+0x12e>
 8000c42:	4a96      	ldr	r2, [pc, #600]	; (8000e9c <HAL_GPIO_Init+0x2a8>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d052      	beq.n	8000cee <HAL_GPIO_Init+0xfa>
 8000c48:	4a94      	ldr	r2, [pc, #592]	; (8000e9c <HAL_GPIO_Init+0x2a8>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d869      	bhi.n	8000d22 <HAL_GPIO_Init+0x12e>
 8000c4e:	4a94      	ldr	r2, [pc, #592]	; (8000ea0 <HAL_GPIO_Init+0x2ac>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d04c      	beq.n	8000cee <HAL_GPIO_Init+0xfa>
 8000c54:	4a92      	ldr	r2, [pc, #584]	; (8000ea0 <HAL_GPIO_Init+0x2ac>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d863      	bhi.n	8000d22 <HAL_GPIO_Init+0x12e>
 8000c5a:	4a92      	ldr	r2, [pc, #584]	; (8000ea4 <HAL_GPIO_Init+0x2b0>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d046      	beq.n	8000cee <HAL_GPIO_Init+0xfa>
 8000c60:	4a90      	ldr	r2, [pc, #576]	; (8000ea4 <HAL_GPIO_Init+0x2b0>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d85d      	bhi.n	8000d22 <HAL_GPIO_Init+0x12e>
 8000c66:	2b12      	cmp	r3, #18
 8000c68:	d82a      	bhi.n	8000cc0 <HAL_GPIO_Init+0xcc>
 8000c6a:	2b12      	cmp	r3, #18
 8000c6c:	d859      	bhi.n	8000d22 <HAL_GPIO_Init+0x12e>
 8000c6e:	a201      	add	r2, pc, #4	; (adr r2, 8000c74 <HAL_GPIO_Init+0x80>)
 8000c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c74:	08000cef 	.word	0x08000cef
 8000c78:	08000cc9 	.word	0x08000cc9
 8000c7c:	08000cdb 	.word	0x08000cdb
 8000c80:	08000d1d 	.word	0x08000d1d
 8000c84:	08000d23 	.word	0x08000d23
 8000c88:	08000d23 	.word	0x08000d23
 8000c8c:	08000d23 	.word	0x08000d23
 8000c90:	08000d23 	.word	0x08000d23
 8000c94:	08000d23 	.word	0x08000d23
 8000c98:	08000d23 	.word	0x08000d23
 8000c9c:	08000d23 	.word	0x08000d23
 8000ca0:	08000d23 	.word	0x08000d23
 8000ca4:	08000d23 	.word	0x08000d23
 8000ca8:	08000d23 	.word	0x08000d23
 8000cac:	08000d23 	.word	0x08000d23
 8000cb0:	08000d23 	.word	0x08000d23
 8000cb4:	08000d23 	.word	0x08000d23
 8000cb8:	08000cd1 	.word	0x08000cd1
 8000cbc:	08000ce5 	.word	0x08000ce5
 8000cc0:	4a79      	ldr	r2, [pc, #484]	; (8000ea8 <HAL_GPIO_Init+0x2b4>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d013      	beq.n	8000cee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cc6:	e02c      	b.n	8000d22 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	623b      	str	r3, [r7, #32]
          break;
 8000cce:	e029      	b.n	8000d24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	3304      	adds	r3, #4
 8000cd6:	623b      	str	r3, [r7, #32]
          break;
 8000cd8:	e024      	b.n	8000d24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	68db      	ldr	r3, [r3, #12]
 8000cde:	3308      	adds	r3, #8
 8000ce0:	623b      	str	r3, [r7, #32]
          break;
 8000ce2:	e01f      	b.n	8000d24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	330c      	adds	r3, #12
 8000cea:	623b      	str	r3, [r7, #32]
          break;
 8000cec:	e01a      	b.n	8000d24 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d102      	bne.n	8000cfc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cf6:	2304      	movs	r3, #4
 8000cf8:	623b      	str	r3, [r7, #32]
          break;
 8000cfa:	e013      	b.n	8000d24 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d105      	bne.n	8000d10 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d04:	2308      	movs	r3, #8
 8000d06:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	69fa      	ldr	r2, [r7, #28]
 8000d0c:	611a      	str	r2, [r3, #16]
          break;
 8000d0e:	e009      	b.n	8000d24 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d10:	2308      	movs	r3, #8
 8000d12:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	69fa      	ldr	r2, [r7, #28]
 8000d18:	615a      	str	r2, [r3, #20]
          break;
 8000d1a:	e003      	b.n	8000d24 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	623b      	str	r3, [r7, #32]
          break;
 8000d20:	e000      	b.n	8000d24 <HAL_GPIO_Init+0x130>
          break;
 8000d22:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	2bff      	cmp	r3, #255	; 0xff
 8000d28:	d801      	bhi.n	8000d2e <HAL_GPIO_Init+0x13a>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	e001      	b.n	8000d32 <HAL_GPIO_Init+0x13e>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	3304      	adds	r3, #4
 8000d32:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	2bff      	cmp	r3, #255	; 0xff
 8000d38:	d802      	bhi.n	8000d40 <HAL_GPIO_Init+0x14c>
 8000d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	e002      	b.n	8000d46 <HAL_GPIO_Init+0x152>
 8000d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d42:	3b08      	subs	r3, #8
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	210f      	movs	r1, #15
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	fa01 f303 	lsl.w	r3, r1, r3
 8000d54:	43db      	mvns	r3, r3
 8000d56:	401a      	ands	r2, r3
 8000d58:	6a39      	ldr	r1, [r7, #32]
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d60:	431a      	orrs	r2, r3
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f000 80b1 	beq.w	8000ed6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d74:	4b4d      	ldr	r3, [pc, #308]	; (8000eac <HAL_GPIO_Init+0x2b8>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	4a4c      	ldr	r2, [pc, #304]	; (8000eac <HAL_GPIO_Init+0x2b8>)
 8000d7a:	f043 0301 	orr.w	r3, r3, #1
 8000d7e:	6193      	str	r3, [r2, #24]
 8000d80:	4b4a      	ldr	r3, [pc, #296]	; (8000eac <HAL_GPIO_Init+0x2b8>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	60bb      	str	r3, [r7, #8]
 8000d8a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d8c:	4a48      	ldr	r2, [pc, #288]	; (8000eb0 <HAL_GPIO_Init+0x2bc>)
 8000d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d90:	089b      	lsrs	r3, r3, #2
 8000d92:	3302      	adds	r3, #2
 8000d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d98:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9c:	f003 0303 	and.w	r3, r3, #3
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	220f      	movs	r2, #15
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	43db      	mvns	r3, r3
 8000daa:	68fa      	ldr	r2, [r7, #12]
 8000dac:	4013      	ands	r3, r2
 8000dae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4a40      	ldr	r2, [pc, #256]	; (8000eb4 <HAL_GPIO_Init+0x2c0>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d013      	beq.n	8000de0 <HAL_GPIO_Init+0x1ec>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4a3f      	ldr	r2, [pc, #252]	; (8000eb8 <HAL_GPIO_Init+0x2c4>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d00d      	beq.n	8000ddc <HAL_GPIO_Init+0x1e8>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4a3e      	ldr	r2, [pc, #248]	; (8000ebc <HAL_GPIO_Init+0x2c8>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d007      	beq.n	8000dd8 <HAL_GPIO_Init+0x1e4>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4a3d      	ldr	r2, [pc, #244]	; (8000ec0 <HAL_GPIO_Init+0x2cc>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d101      	bne.n	8000dd4 <HAL_GPIO_Init+0x1e0>
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	e006      	b.n	8000de2 <HAL_GPIO_Init+0x1ee>
 8000dd4:	2304      	movs	r3, #4
 8000dd6:	e004      	b.n	8000de2 <HAL_GPIO_Init+0x1ee>
 8000dd8:	2302      	movs	r3, #2
 8000dda:	e002      	b.n	8000de2 <HAL_GPIO_Init+0x1ee>
 8000ddc:	2301      	movs	r3, #1
 8000dde:	e000      	b.n	8000de2 <HAL_GPIO_Init+0x1ee>
 8000de0:	2300      	movs	r3, #0
 8000de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000de4:	f002 0203 	and.w	r2, r2, #3
 8000de8:	0092      	lsls	r2, r2, #2
 8000dea:	4093      	lsls	r3, r2
 8000dec:	68fa      	ldr	r2, [r7, #12]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000df2:	492f      	ldr	r1, [pc, #188]	; (8000eb0 <HAL_GPIO_Init+0x2bc>)
 8000df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df6:	089b      	lsrs	r3, r3, #2
 8000df8:	3302      	adds	r3, #2
 8000dfa:	68fa      	ldr	r2, [r7, #12]
 8000dfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d006      	beq.n	8000e1a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e0c:	4b2d      	ldr	r3, [pc, #180]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	492c      	ldr	r1, [pc, #176]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	600b      	str	r3, [r1, #0]
 8000e18:	e006      	b.n	8000e28 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e1a:	4b2a      	ldr	r3, [pc, #168]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	43db      	mvns	r3, r3
 8000e22:	4928      	ldr	r1, [pc, #160]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e24:	4013      	ands	r3, r2
 8000e26:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d006      	beq.n	8000e42 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e34:	4b23      	ldr	r3, [pc, #140]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e36:	685a      	ldr	r2, [r3, #4]
 8000e38:	4922      	ldr	r1, [pc, #136]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	604b      	str	r3, [r1, #4]
 8000e40:	e006      	b.n	8000e50 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e42:	4b20      	ldr	r3, [pc, #128]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e44:	685a      	ldr	r2, [r3, #4]
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	491e      	ldr	r1, [pc, #120]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d006      	beq.n	8000e6a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e5c:	4b19      	ldr	r3, [pc, #100]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e5e:	689a      	ldr	r2, [r3, #8]
 8000e60:	4918      	ldr	r1, [pc, #96]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	608b      	str	r3, [r1, #8]
 8000e68:	e006      	b.n	8000e78 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e6a:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e6c:	689a      	ldr	r2, [r3, #8]
 8000e6e:	69bb      	ldr	r3, [r7, #24]
 8000e70:	43db      	mvns	r3, r3
 8000e72:	4914      	ldr	r1, [pc, #80]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e74:	4013      	ands	r3, r2
 8000e76:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d021      	beq.n	8000ec8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e84:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e86:	68da      	ldr	r2, [r3, #12]
 8000e88:	490e      	ldr	r1, [pc, #56]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	60cb      	str	r3, [r1, #12]
 8000e90:	e021      	b.n	8000ed6 <HAL_GPIO_Init+0x2e2>
 8000e92:	bf00      	nop
 8000e94:	10320000 	.word	0x10320000
 8000e98:	10310000 	.word	0x10310000
 8000e9c:	10220000 	.word	0x10220000
 8000ea0:	10210000 	.word	0x10210000
 8000ea4:	10120000 	.word	0x10120000
 8000ea8:	10110000 	.word	0x10110000
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	40010000 	.word	0x40010000
 8000eb4:	40010800 	.word	0x40010800
 8000eb8:	40010c00 	.word	0x40010c00
 8000ebc:	40011000 	.word	0x40011000
 8000ec0:	40011400 	.word	0x40011400
 8000ec4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ec8:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <HAL_GPIO_Init+0x304>)
 8000eca:	68da      	ldr	r2, [r3, #12]
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	4909      	ldr	r1, [pc, #36]	; (8000ef8 <HAL_GPIO_Init+0x304>)
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed8:	3301      	adds	r3, #1
 8000eda:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	f47f ae8e 	bne.w	8000c08 <HAL_GPIO_Init+0x14>
  }
}
 8000eec:	bf00      	nop
 8000eee:	bf00      	nop
 8000ef0:	372c      	adds	r7, #44	; 0x2c
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr
 8000ef8:	40010400 	.word	0x40010400

08000efc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d101      	bne.n	8000f0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e26c      	b.n	80013e8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	f000 8087 	beq.w	800102a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f1c:	4b92      	ldr	r3, [pc, #584]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f003 030c 	and.w	r3, r3, #12
 8000f24:	2b04      	cmp	r3, #4
 8000f26:	d00c      	beq.n	8000f42 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f28:	4b8f      	ldr	r3, [pc, #572]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f003 030c 	and.w	r3, r3, #12
 8000f30:	2b08      	cmp	r3, #8
 8000f32:	d112      	bne.n	8000f5a <HAL_RCC_OscConfig+0x5e>
 8000f34:	4b8c      	ldr	r3, [pc, #560]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f40:	d10b      	bne.n	8000f5a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f42:	4b89      	ldr	r3, [pc, #548]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d06c      	beq.n	8001028 <HAL_RCC_OscConfig+0x12c>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d168      	bne.n	8001028 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e246      	b.n	80013e8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f62:	d106      	bne.n	8000f72 <HAL_RCC_OscConfig+0x76>
 8000f64:	4b80      	ldr	r3, [pc, #512]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a7f      	ldr	r2, [pc, #508]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8000f6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f6e:	6013      	str	r3, [r2, #0]
 8000f70:	e02e      	b.n	8000fd0 <HAL_RCC_OscConfig+0xd4>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d10c      	bne.n	8000f94 <HAL_RCC_OscConfig+0x98>
 8000f7a:	4b7b      	ldr	r3, [pc, #492]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a7a      	ldr	r2, [pc, #488]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8000f80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f84:	6013      	str	r3, [r2, #0]
 8000f86:	4b78      	ldr	r3, [pc, #480]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a77      	ldr	r2, [pc, #476]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8000f8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f90:	6013      	str	r3, [r2, #0]
 8000f92:	e01d      	b.n	8000fd0 <HAL_RCC_OscConfig+0xd4>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f9c:	d10c      	bne.n	8000fb8 <HAL_RCC_OscConfig+0xbc>
 8000f9e:	4b72      	ldr	r3, [pc, #456]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a71      	ldr	r2, [pc, #452]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8000fa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fa8:	6013      	str	r3, [r2, #0]
 8000faa:	4b6f      	ldr	r3, [pc, #444]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a6e      	ldr	r2, [pc, #440]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8000fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fb4:	6013      	str	r3, [r2, #0]
 8000fb6:	e00b      	b.n	8000fd0 <HAL_RCC_OscConfig+0xd4>
 8000fb8:	4b6b      	ldr	r3, [pc, #428]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a6a      	ldr	r2, [pc, #424]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8000fbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fc2:	6013      	str	r3, [r2, #0]
 8000fc4:	4b68      	ldr	r3, [pc, #416]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a67      	ldr	r2, [pc, #412]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8000fca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d013      	beq.n	8001000 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd8:	f7ff fb06 	bl	80005e8 <HAL_GetTick>
 8000fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fde:	e008      	b.n	8000ff2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fe0:	f7ff fb02 	bl	80005e8 <HAL_GetTick>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	2b64      	cmp	r3, #100	; 0x64
 8000fec:	d901      	bls.n	8000ff2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	e1fa      	b.n	80013e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ff2:	4b5d      	ldr	r3, [pc, #372]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d0f0      	beq.n	8000fe0 <HAL_RCC_OscConfig+0xe4>
 8000ffe:	e014      	b.n	800102a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001000:	f7ff faf2 	bl	80005e8 <HAL_GetTick>
 8001004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001006:	e008      	b.n	800101a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001008:	f7ff faee 	bl	80005e8 <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	2b64      	cmp	r3, #100	; 0x64
 8001014:	d901      	bls.n	800101a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e1e6      	b.n	80013e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800101a:	4b53      	ldr	r3, [pc, #332]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d1f0      	bne.n	8001008 <HAL_RCC_OscConfig+0x10c>
 8001026:	e000      	b.n	800102a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001028:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	2b00      	cmp	r3, #0
 8001034:	d063      	beq.n	80010fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001036:	4b4c      	ldr	r3, [pc, #304]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f003 030c 	and.w	r3, r3, #12
 800103e:	2b00      	cmp	r3, #0
 8001040:	d00b      	beq.n	800105a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001042:	4b49      	ldr	r3, [pc, #292]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f003 030c 	and.w	r3, r3, #12
 800104a:	2b08      	cmp	r3, #8
 800104c:	d11c      	bne.n	8001088 <HAL_RCC_OscConfig+0x18c>
 800104e:	4b46      	ldr	r3, [pc, #280]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d116      	bne.n	8001088 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800105a:	4b43      	ldr	r3, [pc, #268]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	2b00      	cmp	r3, #0
 8001064:	d005      	beq.n	8001072 <HAL_RCC_OscConfig+0x176>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	691b      	ldr	r3, [r3, #16]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d001      	beq.n	8001072 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e1ba      	b.n	80013e8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001072:	4b3d      	ldr	r3, [pc, #244]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	00db      	lsls	r3, r3, #3
 8001080:	4939      	ldr	r1, [pc, #228]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8001082:	4313      	orrs	r3, r2
 8001084:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001086:	e03a      	b.n	80010fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	691b      	ldr	r3, [r3, #16]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d020      	beq.n	80010d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001090:	4b36      	ldr	r3, [pc, #216]	; (800116c <HAL_RCC_OscConfig+0x270>)
 8001092:	2201      	movs	r2, #1
 8001094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001096:	f7ff faa7 	bl	80005e8 <HAL_GetTick>
 800109a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800109c:	e008      	b.n	80010b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800109e:	f7ff faa3 	bl	80005e8 <HAL_GetTick>
 80010a2:	4602      	mov	r2, r0
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d901      	bls.n	80010b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010ac:	2303      	movs	r3, #3
 80010ae:	e19b      	b.n	80013e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010b0:	4b2d      	ldr	r3, [pc, #180]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 0302 	and.w	r3, r3, #2
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d0f0      	beq.n	800109e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010bc:	4b2a      	ldr	r3, [pc, #168]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	695b      	ldr	r3, [r3, #20]
 80010c8:	00db      	lsls	r3, r3, #3
 80010ca:	4927      	ldr	r1, [pc, #156]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 80010cc:	4313      	orrs	r3, r2
 80010ce:	600b      	str	r3, [r1, #0]
 80010d0:	e015      	b.n	80010fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010d2:	4b26      	ldr	r3, [pc, #152]	; (800116c <HAL_RCC_OscConfig+0x270>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d8:	f7ff fa86 	bl	80005e8 <HAL_GetTick>
 80010dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010de:	e008      	b.n	80010f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010e0:	f7ff fa82 	bl	80005e8 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d901      	bls.n	80010f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e17a      	b.n	80013e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010f2:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d1f0      	bne.n	80010e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 0308 	and.w	r3, r3, #8
 8001106:	2b00      	cmp	r3, #0
 8001108:	d03a      	beq.n	8001180 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	699b      	ldr	r3, [r3, #24]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d019      	beq.n	8001146 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001112:	4b17      	ldr	r3, [pc, #92]	; (8001170 <HAL_RCC_OscConfig+0x274>)
 8001114:	2201      	movs	r2, #1
 8001116:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001118:	f7ff fa66 	bl	80005e8 <HAL_GetTick>
 800111c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800111e:	e008      	b.n	8001132 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001120:	f7ff fa62 	bl	80005e8 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b02      	cmp	r3, #2
 800112c:	d901      	bls.n	8001132 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e15a      	b.n	80013e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001132:	4b0d      	ldr	r3, [pc, #52]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8001134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	2b00      	cmp	r3, #0
 800113c:	d0f0      	beq.n	8001120 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800113e:	2001      	movs	r0, #1
 8001140:	f000 fad8 	bl	80016f4 <RCC_Delay>
 8001144:	e01c      	b.n	8001180 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001146:	4b0a      	ldr	r3, [pc, #40]	; (8001170 <HAL_RCC_OscConfig+0x274>)
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800114c:	f7ff fa4c 	bl	80005e8 <HAL_GetTick>
 8001150:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001152:	e00f      	b.n	8001174 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001154:	f7ff fa48 	bl	80005e8 <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b02      	cmp	r3, #2
 8001160:	d908      	bls.n	8001174 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e140      	b.n	80013e8 <HAL_RCC_OscConfig+0x4ec>
 8001166:	bf00      	nop
 8001168:	40021000 	.word	0x40021000
 800116c:	42420000 	.word	0x42420000
 8001170:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001174:	4b9e      	ldr	r3, [pc, #632]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 8001176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001178:	f003 0302 	and.w	r3, r3, #2
 800117c:	2b00      	cmp	r3, #0
 800117e:	d1e9      	bne.n	8001154 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0304 	and.w	r3, r3, #4
 8001188:	2b00      	cmp	r3, #0
 800118a:	f000 80a6 	beq.w	80012da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800118e:	2300      	movs	r3, #0
 8001190:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001192:	4b97      	ldr	r3, [pc, #604]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 8001194:	69db      	ldr	r3, [r3, #28]
 8001196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d10d      	bne.n	80011ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800119e:	4b94      	ldr	r3, [pc, #592]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 80011a0:	69db      	ldr	r3, [r3, #28]
 80011a2:	4a93      	ldr	r2, [pc, #588]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 80011a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a8:	61d3      	str	r3, [r2, #28]
 80011aa:	4b91      	ldr	r3, [pc, #580]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 80011ac:	69db      	ldr	r3, [r3, #28]
 80011ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011b6:	2301      	movs	r3, #1
 80011b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ba:	4b8e      	ldr	r3, [pc, #568]	; (80013f4 <HAL_RCC_OscConfig+0x4f8>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d118      	bne.n	80011f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011c6:	4b8b      	ldr	r3, [pc, #556]	; (80013f4 <HAL_RCC_OscConfig+0x4f8>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a8a      	ldr	r2, [pc, #552]	; (80013f4 <HAL_RCC_OscConfig+0x4f8>)
 80011cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011d2:	f7ff fa09 	bl	80005e8 <HAL_GetTick>
 80011d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d8:	e008      	b.n	80011ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011da:	f7ff fa05 	bl	80005e8 <HAL_GetTick>
 80011de:	4602      	mov	r2, r0
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	2b64      	cmp	r3, #100	; 0x64
 80011e6:	d901      	bls.n	80011ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80011e8:	2303      	movs	r3, #3
 80011ea:	e0fd      	b.n	80013e8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ec:	4b81      	ldr	r3, [pc, #516]	; (80013f4 <HAL_RCC_OscConfig+0x4f8>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d0f0      	beq.n	80011da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d106      	bne.n	800120e <HAL_RCC_OscConfig+0x312>
 8001200:	4b7b      	ldr	r3, [pc, #492]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 8001202:	6a1b      	ldr	r3, [r3, #32]
 8001204:	4a7a      	ldr	r2, [pc, #488]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 8001206:	f043 0301 	orr.w	r3, r3, #1
 800120a:	6213      	str	r3, [r2, #32]
 800120c:	e02d      	b.n	800126a <HAL_RCC_OscConfig+0x36e>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d10c      	bne.n	8001230 <HAL_RCC_OscConfig+0x334>
 8001216:	4b76      	ldr	r3, [pc, #472]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 8001218:	6a1b      	ldr	r3, [r3, #32]
 800121a:	4a75      	ldr	r2, [pc, #468]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 800121c:	f023 0301 	bic.w	r3, r3, #1
 8001220:	6213      	str	r3, [r2, #32]
 8001222:	4b73      	ldr	r3, [pc, #460]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 8001224:	6a1b      	ldr	r3, [r3, #32]
 8001226:	4a72      	ldr	r2, [pc, #456]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 8001228:	f023 0304 	bic.w	r3, r3, #4
 800122c:	6213      	str	r3, [r2, #32]
 800122e:	e01c      	b.n	800126a <HAL_RCC_OscConfig+0x36e>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	2b05      	cmp	r3, #5
 8001236:	d10c      	bne.n	8001252 <HAL_RCC_OscConfig+0x356>
 8001238:	4b6d      	ldr	r3, [pc, #436]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 800123a:	6a1b      	ldr	r3, [r3, #32]
 800123c:	4a6c      	ldr	r2, [pc, #432]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 800123e:	f043 0304 	orr.w	r3, r3, #4
 8001242:	6213      	str	r3, [r2, #32]
 8001244:	4b6a      	ldr	r3, [pc, #424]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 8001246:	6a1b      	ldr	r3, [r3, #32]
 8001248:	4a69      	ldr	r2, [pc, #420]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 800124a:	f043 0301 	orr.w	r3, r3, #1
 800124e:	6213      	str	r3, [r2, #32]
 8001250:	e00b      	b.n	800126a <HAL_RCC_OscConfig+0x36e>
 8001252:	4b67      	ldr	r3, [pc, #412]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 8001254:	6a1b      	ldr	r3, [r3, #32]
 8001256:	4a66      	ldr	r2, [pc, #408]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 8001258:	f023 0301 	bic.w	r3, r3, #1
 800125c:	6213      	str	r3, [r2, #32]
 800125e:	4b64      	ldr	r3, [pc, #400]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 8001260:	6a1b      	ldr	r3, [r3, #32]
 8001262:	4a63      	ldr	r2, [pc, #396]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 8001264:	f023 0304 	bic.w	r3, r3, #4
 8001268:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d015      	beq.n	800129e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001272:	f7ff f9b9 	bl	80005e8 <HAL_GetTick>
 8001276:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001278:	e00a      	b.n	8001290 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800127a:	f7ff f9b5 	bl	80005e8 <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	f241 3288 	movw	r2, #5000	; 0x1388
 8001288:	4293      	cmp	r3, r2
 800128a:	d901      	bls.n	8001290 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e0ab      	b.n	80013e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001290:	4b57      	ldr	r3, [pc, #348]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 8001292:	6a1b      	ldr	r3, [r3, #32]
 8001294:	f003 0302 	and.w	r3, r3, #2
 8001298:	2b00      	cmp	r3, #0
 800129a:	d0ee      	beq.n	800127a <HAL_RCC_OscConfig+0x37e>
 800129c:	e014      	b.n	80012c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800129e:	f7ff f9a3 	bl	80005e8 <HAL_GetTick>
 80012a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012a4:	e00a      	b.n	80012bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012a6:	f7ff f99f 	bl	80005e8 <HAL_GetTick>
 80012aa:	4602      	mov	r2, r0
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d901      	bls.n	80012bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80012b8:	2303      	movs	r3, #3
 80012ba:	e095      	b.n	80013e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012bc:	4b4c      	ldr	r3, [pc, #304]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 80012be:	6a1b      	ldr	r3, [r3, #32]
 80012c0:	f003 0302 	and.w	r3, r3, #2
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d1ee      	bne.n	80012a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012c8:	7dfb      	ldrb	r3, [r7, #23]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d105      	bne.n	80012da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012ce:	4b48      	ldr	r3, [pc, #288]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 80012d0:	69db      	ldr	r3, [r3, #28]
 80012d2:	4a47      	ldr	r2, [pc, #284]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 80012d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	69db      	ldr	r3, [r3, #28]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	f000 8081 	beq.w	80013e6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012e4:	4b42      	ldr	r3, [pc, #264]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f003 030c 	and.w	r3, r3, #12
 80012ec:	2b08      	cmp	r3, #8
 80012ee:	d061      	beq.n	80013b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	69db      	ldr	r3, [r3, #28]
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d146      	bne.n	8001386 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012f8:	4b3f      	ldr	r3, [pc, #252]	; (80013f8 <HAL_RCC_OscConfig+0x4fc>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fe:	f7ff f973 	bl	80005e8 <HAL_GetTick>
 8001302:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001304:	e008      	b.n	8001318 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001306:	f7ff f96f 	bl	80005e8 <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d901      	bls.n	8001318 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e067      	b.n	80013e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001318:	4b35      	ldr	r3, [pc, #212]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d1f0      	bne.n	8001306 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6a1b      	ldr	r3, [r3, #32]
 8001328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800132c:	d108      	bne.n	8001340 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800132e:	4b30      	ldr	r3, [pc, #192]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	492d      	ldr	r1, [pc, #180]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 800133c:	4313      	orrs	r3, r2
 800133e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001340:	4b2b      	ldr	r3, [pc, #172]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a19      	ldr	r1, [r3, #32]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001350:	430b      	orrs	r3, r1
 8001352:	4927      	ldr	r1, [pc, #156]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 8001354:	4313      	orrs	r3, r2
 8001356:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001358:	4b27      	ldr	r3, [pc, #156]	; (80013f8 <HAL_RCC_OscConfig+0x4fc>)
 800135a:	2201      	movs	r2, #1
 800135c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135e:	f7ff f943 	bl	80005e8 <HAL_GetTick>
 8001362:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001364:	e008      	b.n	8001378 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001366:	f7ff f93f 	bl	80005e8 <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	2b02      	cmp	r3, #2
 8001372:	d901      	bls.n	8001378 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001374:	2303      	movs	r3, #3
 8001376:	e037      	b.n	80013e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001378:	4b1d      	ldr	r3, [pc, #116]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d0f0      	beq.n	8001366 <HAL_RCC_OscConfig+0x46a>
 8001384:	e02f      	b.n	80013e6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001386:	4b1c      	ldr	r3, [pc, #112]	; (80013f8 <HAL_RCC_OscConfig+0x4fc>)
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138c:	f7ff f92c 	bl	80005e8 <HAL_GetTick>
 8001390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001392:	e008      	b.n	80013a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001394:	f7ff f928 	bl	80005e8 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e020      	b.n	80013e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013a6:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1f0      	bne.n	8001394 <HAL_RCC_OscConfig+0x498>
 80013b2:	e018      	b.n	80013e6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	69db      	ldr	r3, [r3, #28]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d101      	bne.n	80013c0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e013      	b.n	80013e8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80013c0:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a1b      	ldr	r3, [r3, #32]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d106      	bne.n	80013e2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013de:	429a      	cmp	r2, r3
 80013e0:	d001      	beq.n	80013e6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e000      	b.n	80013e8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3718      	adds	r7, #24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40021000 	.word	0x40021000
 80013f4:	40007000 	.word	0x40007000
 80013f8:	42420060 	.word	0x42420060

080013fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d101      	bne.n	8001410 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e0d0      	b.n	80015b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001410:	4b6a      	ldr	r3, [pc, #424]	; (80015bc <HAL_RCC_ClockConfig+0x1c0>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0307 	and.w	r3, r3, #7
 8001418:	683a      	ldr	r2, [r7, #0]
 800141a:	429a      	cmp	r2, r3
 800141c:	d910      	bls.n	8001440 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800141e:	4b67      	ldr	r3, [pc, #412]	; (80015bc <HAL_RCC_ClockConfig+0x1c0>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f023 0207 	bic.w	r2, r3, #7
 8001426:	4965      	ldr	r1, [pc, #404]	; (80015bc <HAL_RCC_ClockConfig+0x1c0>)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	4313      	orrs	r3, r2
 800142c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800142e:	4b63      	ldr	r3, [pc, #396]	; (80015bc <HAL_RCC_ClockConfig+0x1c0>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0307 	and.w	r3, r3, #7
 8001436:	683a      	ldr	r2, [r7, #0]
 8001438:	429a      	cmp	r2, r3
 800143a:	d001      	beq.n	8001440 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e0b8      	b.n	80015b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d020      	beq.n	800148e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0304 	and.w	r3, r3, #4
 8001454:	2b00      	cmp	r3, #0
 8001456:	d005      	beq.n	8001464 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001458:	4b59      	ldr	r3, [pc, #356]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	4a58      	ldr	r2, [pc, #352]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 800145e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001462:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0308 	and.w	r3, r3, #8
 800146c:	2b00      	cmp	r3, #0
 800146e:	d005      	beq.n	800147c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001470:	4b53      	ldr	r3, [pc, #332]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	4a52      	ldr	r2, [pc, #328]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001476:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800147a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800147c:	4b50      	ldr	r3, [pc, #320]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	494d      	ldr	r1, [pc, #308]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 800148a:	4313      	orrs	r3, r2
 800148c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	2b00      	cmp	r3, #0
 8001498:	d040      	beq.n	800151c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d107      	bne.n	80014b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014a2:	4b47      	ldr	r3, [pc, #284]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d115      	bne.n	80014da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e07f      	b.n	80015b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d107      	bne.n	80014ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ba:	4b41      	ldr	r3, [pc, #260]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d109      	bne.n	80014da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e073      	b.n	80015b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ca:	4b3d      	ldr	r3, [pc, #244]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d101      	bne.n	80014da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e06b      	b.n	80015b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014da:	4b39      	ldr	r3, [pc, #228]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f023 0203 	bic.w	r2, r3, #3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	4936      	ldr	r1, [pc, #216]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 80014e8:	4313      	orrs	r3, r2
 80014ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014ec:	f7ff f87c 	bl	80005e8 <HAL_GetTick>
 80014f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014f2:	e00a      	b.n	800150a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014f4:	f7ff f878 	bl	80005e8 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001502:	4293      	cmp	r3, r2
 8001504:	d901      	bls.n	800150a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e053      	b.n	80015b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800150a:	4b2d      	ldr	r3, [pc, #180]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f003 020c 	and.w	r2, r3, #12
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	429a      	cmp	r2, r3
 800151a:	d1eb      	bne.n	80014f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800151c:	4b27      	ldr	r3, [pc, #156]	; (80015bc <HAL_RCC_ClockConfig+0x1c0>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0307 	and.w	r3, r3, #7
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	429a      	cmp	r2, r3
 8001528:	d210      	bcs.n	800154c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800152a:	4b24      	ldr	r3, [pc, #144]	; (80015bc <HAL_RCC_ClockConfig+0x1c0>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f023 0207 	bic.w	r2, r3, #7
 8001532:	4922      	ldr	r1, [pc, #136]	; (80015bc <HAL_RCC_ClockConfig+0x1c0>)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	4313      	orrs	r3, r2
 8001538:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800153a:	4b20      	ldr	r3, [pc, #128]	; (80015bc <HAL_RCC_ClockConfig+0x1c0>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	683a      	ldr	r2, [r7, #0]
 8001544:	429a      	cmp	r2, r3
 8001546:	d001      	beq.n	800154c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e032      	b.n	80015b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0304 	and.w	r3, r3, #4
 8001554:	2b00      	cmp	r3, #0
 8001556:	d008      	beq.n	800156a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001558:	4b19      	ldr	r3, [pc, #100]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	4916      	ldr	r1, [pc, #88]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001566:	4313      	orrs	r3, r2
 8001568:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0308 	and.w	r3, r3, #8
 8001572:	2b00      	cmp	r3, #0
 8001574:	d009      	beq.n	800158a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001576:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	490e      	ldr	r1, [pc, #56]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001586:	4313      	orrs	r3, r2
 8001588:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800158a:	f000 f821 	bl	80015d0 <HAL_RCC_GetSysClockFreq>
 800158e:	4602      	mov	r2, r0
 8001590:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	091b      	lsrs	r3, r3, #4
 8001596:	f003 030f 	and.w	r3, r3, #15
 800159a:	490a      	ldr	r1, [pc, #40]	; (80015c4 <HAL_RCC_ClockConfig+0x1c8>)
 800159c:	5ccb      	ldrb	r3, [r1, r3]
 800159e:	fa22 f303 	lsr.w	r3, r2, r3
 80015a2:	4a09      	ldr	r2, [pc, #36]	; (80015c8 <HAL_RCC_ClockConfig+0x1cc>)
 80015a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015a6:	4b09      	ldr	r3, [pc, #36]	; (80015cc <HAL_RCC_ClockConfig+0x1d0>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7fe ffda 	bl	8000564 <HAL_InitTick>

  return HAL_OK;
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40022000 	.word	0x40022000
 80015c0:	40021000 	.word	0x40021000
 80015c4:	08001e64 	.word	0x08001e64
 80015c8:	20000000 	.word	0x20000000
 80015cc:	20000004 	.word	0x20000004

080015d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015d0:	b490      	push	{r4, r7}
 80015d2:	b08a      	sub	sp, #40	; 0x28
 80015d4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80015d6:	4b2a      	ldr	r3, [pc, #168]	; (8001680 <HAL_RCC_GetSysClockFreq+0xb0>)
 80015d8:	1d3c      	adds	r4, r7, #4
 80015da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80015e0:	f240 2301 	movw	r3, #513	; 0x201
 80015e4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015e6:	2300      	movs	r3, #0
 80015e8:	61fb      	str	r3, [r7, #28]
 80015ea:	2300      	movs	r3, #0
 80015ec:	61bb      	str	r3, [r7, #24]
 80015ee:	2300      	movs	r3, #0
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80015f6:	2300      	movs	r3, #0
 80015f8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80015fa:	4b22      	ldr	r3, [pc, #136]	; (8001684 <HAL_RCC_GetSysClockFreq+0xb4>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	f003 030c 	and.w	r3, r3, #12
 8001606:	2b04      	cmp	r3, #4
 8001608:	d002      	beq.n	8001610 <HAL_RCC_GetSysClockFreq+0x40>
 800160a:	2b08      	cmp	r3, #8
 800160c:	d003      	beq.n	8001616 <HAL_RCC_GetSysClockFreq+0x46>
 800160e:	e02d      	b.n	800166c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001610:	4b1d      	ldr	r3, [pc, #116]	; (8001688 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001612:	623b      	str	r3, [r7, #32]
      break;
 8001614:	e02d      	b.n	8001672 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	0c9b      	lsrs	r3, r3, #18
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001622:	4413      	add	r3, r2
 8001624:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001628:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d013      	beq.n	800165c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001634:	4b13      	ldr	r3, [pc, #76]	; (8001684 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	0c5b      	lsrs	r3, r3, #17
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001642:	4413      	add	r3, r2
 8001644:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001648:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	4a0e      	ldr	r2, [pc, #56]	; (8001688 <HAL_RCC_GetSysClockFreq+0xb8>)
 800164e:	fb02 f203 	mul.w	r2, r2, r3
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	fbb2 f3f3 	udiv	r3, r2, r3
 8001658:	627b      	str	r3, [r7, #36]	; 0x24
 800165a:	e004      	b.n	8001666 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	4a0b      	ldr	r2, [pc, #44]	; (800168c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001660:	fb02 f303 	mul.w	r3, r2, r3
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001668:	623b      	str	r3, [r7, #32]
      break;
 800166a:	e002      	b.n	8001672 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <HAL_RCC_GetSysClockFreq+0xb8>)
 800166e:	623b      	str	r3, [r7, #32]
      break;
 8001670:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001672:	6a3b      	ldr	r3, [r7, #32]
}
 8001674:	4618      	mov	r0, r3
 8001676:	3728      	adds	r7, #40	; 0x28
 8001678:	46bd      	mov	sp, r7
 800167a:	bc90      	pop	{r4, r7}
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	08001e54 	.word	0x08001e54
 8001684:	40021000 	.word	0x40021000
 8001688:	007a1200 	.word	0x007a1200
 800168c:	003d0900 	.word	0x003d0900

08001690 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001694:	4b02      	ldr	r3, [pc, #8]	; (80016a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001696:	681b      	ldr	r3, [r3, #0]
}
 8001698:	4618      	mov	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr
 80016a0:	20000000 	.word	0x20000000

080016a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016a8:	f7ff fff2 	bl	8001690 <HAL_RCC_GetHCLKFreq>
 80016ac:	4602      	mov	r2, r0
 80016ae:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	0a1b      	lsrs	r3, r3, #8
 80016b4:	f003 0307 	and.w	r3, r3, #7
 80016b8:	4903      	ldr	r1, [pc, #12]	; (80016c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016ba:	5ccb      	ldrb	r3, [r1, r3]
 80016bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40021000 	.word	0x40021000
 80016c8:	08001e74 	.word	0x08001e74

080016cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016d0:	f7ff ffde 	bl	8001690 <HAL_RCC_GetHCLKFreq>
 80016d4:	4602      	mov	r2, r0
 80016d6:	4b05      	ldr	r3, [pc, #20]	; (80016ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	0adb      	lsrs	r3, r3, #11
 80016dc:	f003 0307 	and.w	r3, r3, #7
 80016e0:	4903      	ldr	r1, [pc, #12]	; (80016f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016e2:	5ccb      	ldrb	r3, [r1, r3]
 80016e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40021000 	.word	0x40021000
 80016f0:	08001e74 	.word	0x08001e74

080016f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016fc:	4b0a      	ldr	r3, [pc, #40]	; (8001728 <RCC_Delay+0x34>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a0a      	ldr	r2, [pc, #40]	; (800172c <RCC_Delay+0x38>)
 8001702:	fba2 2303 	umull	r2, r3, r2, r3
 8001706:	0a5b      	lsrs	r3, r3, #9
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	fb02 f303 	mul.w	r3, r2, r3
 800170e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001710:	bf00      	nop
  }
  while (Delay --);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	1e5a      	subs	r2, r3, #1
 8001716:	60fa      	str	r2, [r7, #12]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d1f9      	bne.n	8001710 <RCC_Delay+0x1c>
}
 800171c:	bf00      	nop
 800171e:	bf00      	nop
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr
 8001728:	20000000 	.word	0x20000000
 800172c:	10624dd3 	.word	0x10624dd3

08001730 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d101      	bne.n	8001742 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e03f      	b.n	80017c2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b00      	cmp	r3, #0
 800174c:	d106      	bne.n	800175c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7fe fe1a 	bl	8000390 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2224      	movs	r2, #36	; 0x24
 8001760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	68da      	ldr	r2, [r3, #12]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001772:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f000 faa7 	bl	8001cc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	691a      	ldr	r2, [r3, #16]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001788:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	695a      	ldr	r2, [r3, #20]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001798:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	68da      	ldr	r2, [r3, #12]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80017a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2220      	movs	r2, #32
 80017b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2220      	movs	r2, #32
 80017bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b08a      	sub	sp, #40	; 0x28
 80017ce:	af02      	add	r7, sp, #8
 80017d0:	60f8      	str	r0, [r7, #12]
 80017d2:	60b9      	str	r1, [r7, #8]
 80017d4:	603b      	str	r3, [r7, #0]
 80017d6:	4613      	mov	r3, r2
 80017d8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80017da:	2300      	movs	r3, #0
 80017dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b20      	cmp	r3, #32
 80017e8:	d17c      	bne.n	80018e4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d002      	beq.n	80017f6 <HAL_UART_Transmit+0x2c>
 80017f0:	88fb      	ldrh	r3, [r7, #6]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d101      	bne.n	80017fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e075      	b.n	80018e6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001800:	2b01      	cmp	r3, #1
 8001802:	d101      	bne.n	8001808 <HAL_UART_Transmit+0x3e>
 8001804:	2302      	movs	r3, #2
 8001806:	e06e      	b.n	80018e6 <HAL_UART_Transmit+0x11c>
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2201      	movs	r2, #1
 800180c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2200      	movs	r2, #0
 8001814:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2221      	movs	r2, #33	; 0x21
 800181a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800181e:	f7fe fee3 	bl	80005e8 <HAL_GetTick>
 8001822:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	88fa      	ldrh	r2, [r7, #6]
 8001828:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	88fa      	ldrh	r2, [r7, #6]
 800182e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001838:	d108      	bne.n	800184c <HAL_UART_Transmit+0x82>
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d104      	bne.n	800184c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001842:	2300      	movs	r3, #0
 8001844:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	61bb      	str	r3, [r7, #24]
 800184a:	e003      	b.n	8001854 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001850:	2300      	movs	r3, #0
 8001852:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800185c:	e02a      	b.n	80018b4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	9300      	str	r3, [sp, #0]
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	2200      	movs	r2, #0
 8001866:	2180      	movs	r1, #128	; 0x80
 8001868:	68f8      	ldr	r0, [r7, #12]
 800186a:	f000 f93d 	bl	8001ae8 <UART_WaitOnFlagUntilTimeout>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e036      	b.n	80018e6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d10b      	bne.n	8001896 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	881b      	ldrh	r3, [r3, #0]
 8001882:	461a      	mov	r2, r3
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800188c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	3302      	adds	r3, #2
 8001892:	61bb      	str	r3, [r7, #24]
 8001894:	e007      	b.n	80018a6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	781a      	ldrb	r2, [r3, #0]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	3301      	adds	r3, #1
 80018a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	3b01      	subs	r3, #1
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1cf      	bne.n	800185e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	2200      	movs	r2, #0
 80018c6:	2140      	movs	r1, #64	; 0x40
 80018c8:	68f8      	ldr	r0, [r7, #12]
 80018ca:	f000 f90d 	bl	8001ae8 <UART_WaitOnFlagUntilTimeout>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e006      	b.n	80018e6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2220      	movs	r2, #32
 80018dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80018e0:	2300      	movs	r3, #0
 80018e2:	e000      	b.n	80018e6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80018e4:	2302      	movs	r3, #2
  }
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3720      	adds	r7, #32
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b084      	sub	sp, #16
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	60f8      	str	r0, [r7, #12]
 80018f6:	60b9      	str	r1, [r7, #8]
 80018f8:	4613      	mov	r3, r2
 80018fa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001902:	b2db      	uxtb	r3, r3
 8001904:	2b20      	cmp	r3, #32
 8001906:	d11d      	bne.n	8001944 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d002      	beq.n	8001914 <HAL_UART_Receive_DMA+0x26>
 800190e:	88fb      	ldrh	r3, [r7, #6]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d101      	bne.n	8001918 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e016      	b.n	8001946 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800191e:	2b01      	cmp	r3, #1
 8001920:	d101      	bne.n	8001926 <HAL_UART_Receive_DMA+0x38>
 8001922:	2302      	movs	r3, #2
 8001924:	e00f      	b.n	8001946 <HAL_UART_Receive_DMA+0x58>
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2201      	movs	r2, #1
 800192a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2200      	movs	r2, #0
 8001932:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8001934:	88fb      	ldrh	r3, [r7, #6]
 8001936:	461a      	mov	r2, r3
 8001938:	68b9      	ldr	r1, [r7, #8]
 800193a:	68f8      	ldr	r0, [r7, #12]
 800193c:	f000 f91e 	bl	8001b7c <UART_Start_Receive_DMA>
 8001940:	4603      	mov	r3, r0
 8001942:	e000      	b.n	8001946 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001944:	2302      	movs	r3, #2
  }
}
 8001946:	4618      	mov	r0, r3
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800194e:	b480      	push	{r7}
 8001950:	b083      	sub	sp, #12
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr

08001960 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	bc80      	pop	{r7}
 8001970:	4770      	bx	lr

08001972 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
 800197a:	460b      	mov	r3, r1
 800197c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr

08001988 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001994:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0320 	and.w	r3, r3, #32
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d12a      	bne.n	80019fa <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2200      	movs	r2, #0
 80019a8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	68da      	ldr	r2, [r3, #12]
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019b8:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	695a      	ldr	r2, [r3, #20]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f022 0201 	bic.w	r2, r2, #1
 80019c8:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	695a      	ldr	r2, [r3, #20]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019d8:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2220      	movs	r2, #32
 80019de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d107      	bne.n	80019fa <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	68da      	ldr	r2, [r3, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f022 0210 	bic.w	r2, r2, #16
 80019f8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d106      	bne.n	8001a10 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001a06:	4619      	mov	r1, r3
 8001a08:	68f8      	ldr	r0, [r7, #12]
 8001a0a:	f7ff ffb2 	bl	8001972 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8001a0e:	e002      	b.n	8001a16 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8001a10:	68f8      	ldr	r0, [r7, #12]
 8001a12:	f7fe fc6d 	bl	80002f0 <HAL_UART_RxCpltCallback>
}
 8001a16:	bf00      	nop
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b084      	sub	sp, #16
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d108      	bne.n	8001a46 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001a38:	085b      	lsrs	r3, r3, #1
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	68f8      	ldr	r0, [r7, #12]
 8001a40:	f7ff ff97 	bl	8001972 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8001a44:	e002      	b.n	8001a4c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8001a46:	68f8      	ldr	r0, [r7, #12]
 8001a48:	f7ff ff81 	bl	800194e <HAL_UART_RxHalfCpltCallback>
}
 8001a4c:	bf00      	nop
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a64:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	695b      	ldr	r3, [r3, #20]
 8001a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	bf14      	ite	ne
 8001a74:	2301      	movne	r3, #1
 8001a76:	2300      	moveq	r3, #0
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	2b21      	cmp	r3, #33	; 0x21
 8001a86:	d108      	bne.n	8001a9a <UART_DMAError+0x46>
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d005      	beq.n	8001a9a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	2200      	movs	r2, #0
 8001a92:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8001a94:	68b8      	ldr	r0, [r7, #8]
 8001a96:	f000 f8d5 	bl	8001c44 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	695b      	ldr	r3, [r3, #20]
 8001aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	bf14      	ite	ne
 8001aa8:	2301      	movne	r3, #1
 8001aaa:	2300      	moveq	r3, #0
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	2b22      	cmp	r3, #34	; 0x22
 8001aba:	d108      	bne.n	8001ace <UART_DMAError+0x7a>
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d005      	beq.n	8001ace <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8001ac8:	68b8      	ldr	r0, [r7, #8]
 8001aca:	f000 f8d0 	bl	8001c6e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	f043 0210 	orr.w	r2, r3, #16
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001ada:	68b8      	ldr	r0, [r7, #8]
 8001adc:	f7ff ff40 	bl	8001960 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001ae0:	bf00      	nop
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	603b      	str	r3, [r7, #0]
 8001af4:	4613      	mov	r3, r2
 8001af6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001af8:	e02c      	b.n	8001b54 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b00:	d028      	beq.n	8001b54 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d007      	beq.n	8001b18 <UART_WaitOnFlagUntilTimeout+0x30>
 8001b08:	f7fe fd6e 	bl	80005e8 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d21d      	bcs.n	8001b54 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	68da      	ldr	r2, [r3, #12]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001b26:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	695a      	ldr	r2, [r3, #20]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f022 0201 	bic.w	r2, r2, #1
 8001b36:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2220      	movs	r2, #32
 8001b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2220      	movs	r2, #32
 8001b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e00f      	b.n	8001b74 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	68ba      	ldr	r2, [r7, #8]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	bf0c      	ite	eq
 8001b64:	2301      	moveq	r3, #1
 8001b66:	2300      	movne	r3, #0
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d0c3      	beq.n	8001afa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	4613      	mov	r3, r2
 8001b88:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8001b8a:	68ba      	ldr	r2, [r7, #8]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	88fa      	ldrh	r2, [r7, #6]
 8001b94:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2222      	movs	r2, #34	; 0x22
 8001ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ba8:	4a23      	ldr	r2, [pc, #140]	; (8001c38 <UART_Start_Receive_DMA+0xbc>)
 8001baa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bb0:	4a22      	ldr	r2, [pc, #136]	; (8001c3c <UART_Start_Receive_DMA+0xc0>)
 8001bb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bb8:	4a21      	ldr	r2, [pc, #132]	; (8001c40 <UART_Start_Receive_DMA+0xc4>)
 8001bba:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8001bc4:	f107 0308 	add.w	r3, r7, #8
 8001bc8:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	3304      	adds	r3, #4
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	88fb      	ldrh	r3, [r7, #6]
 8001bdc:	f7fe fe76 	bl	80008cc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8001be0:	2300      	movs	r3, #0
 8001be2:	613b      	str	r3, [r7, #16]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	613b      	str	r3, [r7, #16]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	613b      	str	r3, [r7, #16]
 8001bf4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	68da      	ldr	r2, [r3, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c0c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	695a      	ldr	r2, [r3, #20]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f042 0201 	orr.w	r2, r2, #1
 8001c1c:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	695a      	ldr	r2, [r3, #20]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c2c:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3718      	adds	r7, #24
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	08001989 	.word	0x08001989
 8001c3c:	08001a1f 	.word	0x08001a1f
 8001c40:	08001a55 	.word	0x08001a55

08001c44 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	68da      	ldr	r2, [r3, #12]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001c5a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2220      	movs	r2, #32
 8001c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bc80      	pop	{r7}
 8001c6c:	4770      	bx	lr

08001c6e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	68da      	ldr	r2, [r3, #12]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001c84:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	695a      	ldr	r2, [r3, #20]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f022 0201 	bic.w	r2, r2, #1
 8001c94:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d107      	bne.n	8001cae <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	68da      	ldr	r2, [r3, #12]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 0210 	bic.w	r2, r2, #16
 8001cac:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2220      	movs	r2, #32
 8001cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bc80      	pop	{r7}
 8001cc4:	4770      	bx	lr
	...

08001cc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	68da      	ldr	r2, [r3, #12]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	689a      	ldr	r2, [r3, #8]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	695b      	ldr	r3, [r3, #20]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001d02:	f023 030c 	bic.w	r3, r3, #12
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	6812      	ldr	r2, [r2, #0]
 8001d0a:	68b9      	ldr	r1, [r7, #8]
 8001d0c:	430b      	orrs	r3, r1
 8001d0e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	699a      	ldr	r2, [r3, #24]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	430a      	orrs	r2, r1
 8001d24:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a2c      	ldr	r2, [pc, #176]	; (8001ddc <UART_SetConfig+0x114>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d103      	bne.n	8001d38 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001d30:	f7ff fccc 	bl	80016cc <HAL_RCC_GetPCLK2Freq>
 8001d34:	60f8      	str	r0, [r7, #12]
 8001d36:	e002      	b.n	8001d3e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001d38:	f7ff fcb4 	bl	80016a4 <HAL_RCC_GetPCLK1Freq>
 8001d3c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	4613      	mov	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	009a      	lsls	r2, r3, #2
 8001d48:	441a      	add	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d54:	4a22      	ldr	r2, [pc, #136]	; (8001de0 <UART_SetConfig+0x118>)
 8001d56:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5a:	095b      	lsrs	r3, r3, #5
 8001d5c:	0119      	lsls	r1, r3, #4
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	4613      	mov	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4413      	add	r3, r2
 8001d66:	009a      	lsls	r2, r3, #2
 8001d68:	441a      	add	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d74:	4b1a      	ldr	r3, [pc, #104]	; (8001de0 <UART_SetConfig+0x118>)
 8001d76:	fba3 0302 	umull	r0, r3, r3, r2
 8001d7a:	095b      	lsrs	r3, r3, #5
 8001d7c:	2064      	movs	r0, #100	; 0x64
 8001d7e:	fb00 f303 	mul.w	r3, r0, r3
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	011b      	lsls	r3, r3, #4
 8001d86:	3332      	adds	r3, #50	; 0x32
 8001d88:	4a15      	ldr	r2, [pc, #84]	; (8001de0 <UART_SetConfig+0x118>)
 8001d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8e:	095b      	lsrs	r3, r3, #5
 8001d90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d94:	4419      	add	r1, r3
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	4413      	add	r3, r2
 8001d9e:	009a      	lsls	r2, r3, #2
 8001da0:	441a      	add	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001dac:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <UART_SetConfig+0x118>)
 8001dae:	fba3 0302 	umull	r0, r3, r3, r2
 8001db2:	095b      	lsrs	r3, r3, #5
 8001db4:	2064      	movs	r0, #100	; 0x64
 8001db6:	fb00 f303 	mul.w	r3, r0, r3
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	011b      	lsls	r3, r3, #4
 8001dbe:	3332      	adds	r3, #50	; 0x32
 8001dc0:	4a07      	ldr	r2, [pc, #28]	; (8001de0 <UART_SetConfig+0x118>)
 8001dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc6:	095b      	lsrs	r3, r3, #5
 8001dc8:	f003 020f 	and.w	r2, r3, #15
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	440a      	add	r2, r1
 8001dd2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001dd4:	bf00      	nop
 8001dd6:	3710      	adds	r7, #16
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40013800 	.word	0x40013800
 8001de0:	51eb851f 	.word	0x51eb851f

08001de4 <__libc_init_array>:
 8001de4:	b570      	push	{r4, r5, r6, lr}
 8001de6:	2600      	movs	r6, #0
 8001de8:	4d0c      	ldr	r5, [pc, #48]	; (8001e1c <__libc_init_array+0x38>)
 8001dea:	4c0d      	ldr	r4, [pc, #52]	; (8001e20 <__libc_init_array+0x3c>)
 8001dec:	1b64      	subs	r4, r4, r5
 8001dee:	10a4      	asrs	r4, r4, #2
 8001df0:	42a6      	cmp	r6, r4
 8001df2:	d109      	bne.n	8001e08 <__libc_init_array+0x24>
 8001df4:	f000 f822 	bl	8001e3c <_init>
 8001df8:	2600      	movs	r6, #0
 8001dfa:	4d0a      	ldr	r5, [pc, #40]	; (8001e24 <__libc_init_array+0x40>)
 8001dfc:	4c0a      	ldr	r4, [pc, #40]	; (8001e28 <__libc_init_array+0x44>)
 8001dfe:	1b64      	subs	r4, r4, r5
 8001e00:	10a4      	asrs	r4, r4, #2
 8001e02:	42a6      	cmp	r6, r4
 8001e04:	d105      	bne.n	8001e12 <__libc_init_array+0x2e>
 8001e06:	bd70      	pop	{r4, r5, r6, pc}
 8001e08:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e0c:	4798      	blx	r3
 8001e0e:	3601      	adds	r6, #1
 8001e10:	e7ee      	b.n	8001df0 <__libc_init_array+0xc>
 8001e12:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e16:	4798      	blx	r3
 8001e18:	3601      	adds	r6, #1
 8001e1a:	e7f2      	b.n	8001e02 <__libc_init_array+0x1e>
 8001e1c:	08001e7c 	.word	0x08001e7c
 8001e20:	08001e7c 	.word	0x08001e7c
 8001e24:	08001e7c 	.word	0x08001e7c
 8001e28:	08001e80 	.word	0x08001e80

08001e2c <memset>:
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	4402      	add	r2, r0
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d100      	bne.n	8001e36 <memset+0xa>
 8001e34:	4770      	bx	lr
 8001e36:	f803 1b01 	strb.w	r1, [r3], #1
 8001e3a:	e7f9      	b.n	8001e30 <memset+0x4>

08001e3c <_init>:
 8001e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e3e:	bf00      	nop
 8001e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e42:	bc08      	pop	{r3}
 8001e44:	469e      	mov	lr, r3
 8001e46:	4770      	bx	lr

08001e48 <_fini>:
 8001e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e4a:	bf00      	nop
 8001e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e4e:	bc08      	pop	{r3}
 8001e50:	469e      	mov	lr, r3
 8001e52:	4770      	bx	lr
