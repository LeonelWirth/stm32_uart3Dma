
stm32 _uart3DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000256c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002678  08002678  00012678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026a0  080026a0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080026a0  080026a0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026a0  080026a0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026a0  080026a0  000126a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026a4  080026a4  000126a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080026a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  2000000c  080026b4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  080026b4  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006a08  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001548  00000000  00000000  00026a3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000698  00000000  00000000  00027f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000620  00000000  00000000  00028620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016baa  00000000  00000000  00028c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000727f  00000000  00000000  0003f7ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000823f6  00000000  00000000  00046a69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c8e5f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001974  00000000  00000000  000c8eb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002660 	.word	0x08002660

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002660 	.word	0x08002660

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fa82 	bl	8000658 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f818 	bl	8000188 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8ac 	bl	80002b4 <MX_GPIO_Init>
  MX_DMA_Init();
 800015c:	f000 f884 	bl	8000268 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000160:	f000 f858 	bl	8000214 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&huart3, bufReceiveDMA, sizeof(bufReceiveDMA));
 8000164:	2208      	movs	r2, #8
 8000166:	4905      	ldr	r1, [pc, #20]	; (800017c <main+0x30>)
 8000168:	4805      	ldr	r0, [pc, #20]	; (8000180 <main+0x34>)
 800016a:	f001 fd0d 	bl	8001b88 <HAL_UART_Receive_DMA>
  HAL_UART_Transmit_DMA(&huart3, (uint8_t*)bufSendDMA, sizeof (bufSendDMA));
 800016e:	2208      	movs	r2, #8
 8000170:	4904      	ldr	r1, [pc, #16]	; (8000184 <main+0x38>)
 8000172:	4803      	ldr	r0, [pc, #12]	; (8000180 <main+0x34>)
 8000174:	f001 fc9c 	bl	8001ab0 <HAL_UART_Transmit_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000178:	e7fe      	b.n	8000178 <main+0x2c>
 800017a:	bf00      	nop
 800017c:	20000030 	.word	0x20000030
 8000180:	2000007c 	.word	0x2000007c
 8000184:	20000028 	.word	0x20000028

08000188 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b090      	sub	sp, #64	; 0x40
 800018c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800018e:	f107 0318 	add.w	r3, r7, #24
 8000192:	2228      	movs	r2, #40	; 0x28
 8000194:	2100      	movs	r1, #0
 8000196:	4618      	mov	r0, r3
 8000198:	f002 fa5a 	bl	8002650 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800019c:	1d3b      	adds	r3, r7, #4
 800019e:	2200      	movs	r2, #0
 80001a0:	601a      	str	r2, [r3, #0]
 80001a2:	605a      	str	r2, [r3, #4]
 80001a4:	609a      	str	r2, [r3, #8]
 80001a6:	60da      	str	r2, [r3, #12]
 80001a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001aa:	2301      	movs	r3, #1
 80001ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001b4:	2300      	movs	r3, #0
 80001b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001b8:	2301      	movs	r3, #1
 80001ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001bc:	2302      	movs	r3, #2
 80001be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001c6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001cc:	f107 0318 	add.w	r3, r7, #24
 80001d0:	4618      	mov	r0, r3
 80001d2:	f001 f805 	bl	80011e0 <HAL_RCC_OscConfig>
 80001d6:	4603      	mov	r3, r0
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d001      	beq.n	80001e0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001dc:	f000 f8e9 	bl	80003b2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001e0:	230f      	movs	r3, #15
 80001e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001e4:	2302      	movs	r3, #2
 80001e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001e8:	2300      	movs	r3, #0
 80001ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001f2:	2300      	movs	r3, #0
 80001f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001f6:	1d3b      	adds	r3, r7, #4
 80001f8:	2102      	movs	r1, #2
 80001fa:	4618      	mov	r0, r3
 80001fc:	f001 fa70 	bl	80016e0 <HAL_RCC_ClockConfig>
 8000200:	4603      	mov	r3, r0
 8000202:	2b00      	cmp	r3, #0
 8000204:	d001      	beq.n	800020a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000206:	f000 f8d4 	bl	80003b2 <Error_Handler>
  }
}
 800020a:	bf00      	nop
 800020c:	3740      	adds	r7, #64	; 0x40
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}
	...

08000214 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000218:	4b11      	ldr	r3, [pc, #68]	; (8000260 <MX_USART3_UART_Init+0x4c>)
 800021a:	4a12      	ldr	r2, [pc, #72]	; (8000264 <MX_USART3_UART_Init+0x50>)
 800021c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800021e:	4b10      	ldr	r3, [pc, #64]	; (8000260 <MX_USART3_UART_Init+0x4c>)
 8000220:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000224:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000226:	4b0e      	ldr	r3, [pc, #56]	; (8000260 <MX_USART3_UART_Init+0x4c>)
 8000228:	2200      	movs	r2, #0
 800022a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800022c:	4b0c      	ldr	r3, [pc, #48]	; (8000260 <MX_USART3_UART_Init+0x4c>)
 800022e:	2200      	movs	r2, #0
 8000230:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000232:	4b0b      	ldr	r3, [pc, #44]	; (8000260 <MX_USART3_UART_Init+0x4c>)
 8000234:	2200      	movs	r2, #0
 8000236:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000238:	4b09      	ldr	r3, [pc, #36]	; (8000260 <MX_USART3_UART_Init+0x4c>)
 800023a:	220c      	movs	r2, #12
 800023c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800023e:	4b08      	ldr	r3, [pc, #32]	; (8000260 <MX_USART3_UART_Init+0x4c>)
 8000240:	2200      	movs	r2, #0
 8000242:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000244:	4b06      	ldr	r3, [pc, #24]	; (8000260 <MX_USART3_UART_Init+0x4c>)
 8000246:	2200      	movs	r2, #0
 8000248:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800024a:	4805      	ldr	r0, [pc, #20]	; (8000260 <MX_USART3_UART_Init+0x4c>)
 800024c:	f001 fbe2 	bl	8001a14 <HAL_UART_Init>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000256:	f000 f8ac 	bl	80003b2 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800025a:	bf00      	nop
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	2000007c 	.word	0x2000007c
 8000264:	40004800 	.word	0x40004800

08000268 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800026e:	4b10      	ldr	r3, [pc, #64]	; (80002b0 <MX_DMA_Init+0x48>)
 8000270:	695b      	ldr	r3, [r3, #20]
 8000272:	4a0f      	ldr	r2, [pc, #60]	; (80002b0 <MX_DMA_Init+0x48>)
 8000274:	f043 0301 	orr.w	r3, r3, #1
 8000278:	6153      	str	r3, [r2, #20]
 800027a:	4b0d      	ldr	r3, [pc, #52]	; (80002b0 <MX_DMA_Init+0x48>)
 800027c:	695b      	ldr	r3, [r3, #20]
 800027e:	f003 0301 	and.w	r3, r3, #1
 8000282:	607b      	str	r3, [r7, #4]
 8000284:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000286:	2200      	movs	r2, #0
 8000288:	2100      	movs	r1, #0
 800028a:	200c      	movs	r0, #12
 800028c:	f000 fb1d 	bl	80008ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000290:	200c      	movs	r0, #12
 8000292:	f000 fb36 	bl	8000902 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000296:	2200      	movs	r2, #0
 8000298:	2100      	movs	r1, #0
 800029a:	200d      	movs	r0, #13
 800029c:	f000 fb15 	bl	80008ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80002a0:	200d      	movs	r0, #13
 80002a2:	f000 fb2e 	bl	8000902 <HAL_NVIC_EnableIRQ>

}
 80002a6:	bf00      	nop
 80002a8:	3708      	adds	r7, #8
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	40021000 	.word	0x40021000

080002b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b088      	sub	sp, #32
 80002b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ba:	f107 0310 	add.w	r3, r7, #16
 80002be:	2200      	movs	r2, #0
 80002c0:	601a      	str	r2, [r3, #0]
 80002c2:	605a      	str	r2, [r3, #4]
 80002c4:	609a      	str	r2, [r3, #8]
 80002c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002c8:	4b24      	ldr	r3, [pc, #144]	; (800035c <MX_GPIO_Init+0xa8>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	4a23      	ldr	r2, [pc, #140]	; (800035c <MX_GPIO_Init+0xa8>)
 80002ce:	f043 0310 	orr.w	r3, r3, #16
 80002d2:	6193      	str	r3, [r2, #24]
 80002d4:	4b21      	ldr	r3, [pc, #132]	; (800035c <MX_GPIO_Init+0xa8>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	f003 0310 	and.w	r3, r3, #16
 80002dc:	60fb      	str	r3, [r7, #12]
 80002de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002e0:	4b1e      	ldr	r3, [pc, #120]	; (800035c <MX_GPIO_Init+0xa8>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	4a1d      	ldr	r2, [pc, #116]	; (800035c <MX_GPIO_Init+0xa8>)
 80002e6:	f043 0320 	orr.w	r3, r3, #32
 80002ea:	6193      	str	r3, [r2, #24]
 80002ec:	4b1b      	ldr	r3, [pc, #108]	; (800035c <MX_GPIO_Init+0xa8>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	f003 0320 	and.w	r3, r3, #32
 80002f4:	60bb      	str	r3, [r7, #8]
 80002f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002f8:	4b18      	ldr	r3, [pc, #96]	; (800035c <MX_GPIO_Init+0xa8>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	4a17      	ldr	r2, [pc, #92]	; (800035c <MX_GPIO_Init+0xa8>)
 80002fe:	f043 0308 	orr.w	r3, r3, #8
 8000302:	6193      	str	r3, [r2, #24]
 8000304:	4b15      	ldr	r3, [pc, #84]	; (800035c <MX_GPIO_Init+0xa8>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	f003 0308 	and.w	r3, r3, #8
 800030c:	607b      	str	r3, [r7, #4]
 800030e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000310:	4b12      	ldr	r3, [pc, #72]	; (800035c <MX_GPIO_Init+0xa8>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	4a11      	ldr	r2, [pc, #68]	; (800035c <MX_GPIO_Init+0xa8>)
 8000316:	f043 0304 	orr.w	r3, r3, #4
 800031a:	6193      	str	r3, [r2, #24]
 800031c:	4b0f      	ldr	r3, [pc, #60]	; (800035c <MX_GPIO_Init+0xa8>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	f003 0304 	and.w	r3, r3, #4
 8000324:	603b      	str	r3, [r7, #0]
 8000326:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000328:	2200      	movs	r2, #0
 800032a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800032e:	480c      	ldr	r0, [pc, #48]	; (8000360 <MX_GPIO_Init+0xac>)
 8000330:	f000 ff24 	bl	800117c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000334:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000338:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800033a:	2301      	movs	r3, #1
 800033c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033e:	2300      	movs	r3, #0
 8000340:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000342:	2302      	movs	r3, #2
 8000344:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000346:	f107 0310 	add.w	r3, r7, #16
 800034a:	4619      	mov	r1, r3
 800034c:	4804      	ldr	r0, [pc, #16]	; (8000360 <MX_GPIO_Init+0xac>)
 800034e:	f000 fd91 	bl	8000e74 <HAL_GPIO_Init>

}
 8000352:	bf00      	nop
 8000354:	3720      	adds	r7, #32
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	40021000 	.word	0x40021000
 8000360:	40011000 	.word	0x40011000

08000364 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) // Callback que e ejecuta cuando se completo una recepcion.
//La recepción se completa cuando se completa el buffer, hasta entonces no se entra en la función. ES ALGO QUE HAY QUE TENNER EN CUENTA.

{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800036c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000370:	4808      	ldr	r0, [pc, #32]	; (8000394 <HAL_UART_RxCpltCallback+0x30>)
 8000372:	f000 ff1b 	bl	80011ac <HAL_GPIO_TogglePin>
	HAL_UART_Transmit_DMA(&huart3, bufReceiveDMA, 7);// Reenvio lo que recibi para comprobar
 8000376:	2207      	movs	r2, #7
 8000378:	4907      	ldr	r1, [pc, #28]	; (8000398 <HAL_UART_RxCpltCallback+0x34>)
 800037a:	4808      	ldr	r0, [pc, #32]	; (800039c <HAL_UART_RxCpltCallback+0x38>)
 800037c:	f001 fb98 	bl	8001ab0 <HAL_UART_Transmit_DMA>
	HAL_UART_Receive_DMA(&huart3, bufReceiveDMA, sizeof(bufReceiveDMA)); // Vuelvo a iniciar la recepcion por DMA
 8000380:	2208      	movs	r2, #8
 8000382:	4905      	ldr	r1, [pc, #20]	; (8000398 <HAL_UART_RxCpltCallback+0x34>)
 8000384:	4805      	ldr	r0, [pc, #20]	; (800039c <HAL_UART_RxCpltCallback+0x38>)
 8000386:	f001 fbff 	bl	8001b88 <HAL_UART_Receive_DMA>

}
 800038a:	bf00      	nop
 800038c:	3708      	adds	r7, #8
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	40011000 	.word	0x40011000
 8000398:	20000030 	.word	0x20000030
 800039c:	2000007c 	.word	0x2000007c

080003a0 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]


}
 80003a8:	bf00      	nop
 80003aa:	370c      	adds	r7, #12
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bc80      	pop	{r7}
 80003b0:	4770      	bx	lr

080003b2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003b2:	b480      	push	{r7}
 80003b4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003b6:	b672      	cpsid	i
}
 80003b8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003ba:	e7fe      	b.n	80003ba <Error_Handler+0x8>

080003bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	b085      	sub	sp, #20
 80003c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003c2:	4b15      	ldr	r3, [pc, #84]	; (8000418 <HAL_MspInit+0x5c>)
 80003c4:	699b      	ldr	r3, [r3, #24]
 80003c6:	4a14      	ldr	r2, [pc, #80]	; (8000418 <HAL_MspInit+0x5c>)
 80003c8:	f043 0301 	orr.w	r3, r3, #1
 80003cc:	6193      	str	r3, [r2, #24]
 80003ce:	4b12      	ldr	r3, [pc, #72]	; (8000418 <HAL_MspInit+0x5c>)
 80003d0:	699b      	ldr	r3, [r3, #24]
 80003d2:	f003 0301 	and.w	r3, r3, #1
 80003d6:	60bb      	str	r3, [r7, #8]
 80003d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003da:	4b0f      	ldr	r3, [pc, #60]	; (8000418 <HAL_MspInit+0x5c>)
 80003dc:	69db      	ldr	r3, [r3, #28]
 80003de:	4a0e      	ldr	r2, [pc, #56]	; (8000418 <HAL_MspInit+0x5c>)
 80003e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003e4:	61d3      	str	r3, [r2, #28]
 80003e6:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <HAL_MspInit+0x5c>)
 80003e8:	69db      	ldr	r3, [r3, #28]
 80003ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003ee:	607b      	str	r3, [r7, #4]
 80003f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003f2:	4b0a      	ldr	r3, [pc, #40]	; (800041c <HAL_MspInit+0x60>)
 80003f4:	685b      	ldr	r3, [r3, #4]
 80003f6:	60fb      	str	r3, [r7, #12]
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003fe:	60fb      	str	r3, [r7, #12]
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000406:	60fb      	str	r3, [r7, #12]
 8000408:	4a04      	ldr	r2, [pc, #16]	; (800041c <HAL_MspInit+0x60>)
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800040e:	bf00      	nop
 8000410:	3714      	adds	r7, #20
 8000412:	46bd      	mov	sp, r7
 8000414:	bc80      	pop	{r7}
 8000416:	4770      	bx	lr
 8000418:	40021000 	.word	0x40021000
 800041c:	40010000 	.word	0x40010000

08000420 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b088      	sub	sp, #32
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000428:	f107 0310 	add.w	r3, r7, #16
 800042c:	2200      	movs	r2, #0
 800042e:	601a      	str	r2, [r3, #0]
 8000430:	605a      	str	r2, [r3, #4]
 8000432:	609a      	str	r2, [r3, #8]
 8000434:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	4a47      	ldr	r2, [pc, #284]	; (8000558 <HAL_UART_MspInit+0x138>)
 800043c:	4293      	cmp	r3, r2
 800043e:	f040 8086 	bne.w	800054e <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000442:	4b46      	ldr	r3, [pc, #280]	; (800055c <HAL_UART_MspInit+0x13c>)
 8000444:	69db      	ldr	r3, [r3, #28]
 8000446:	4a45      	ldr	r2, [pc, #276]	; (800055c <HAL_UART_MspInit+0x13c>)
 8000448:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800044c:	61d3      	str	r3, [r2, #28]
 800044e:	4b43      	ldr	r3, [pc, #268]	; (800055c <HAL_UART_MspInit+0x13c>)
 8000450:	69db      	ldr	r3, [r3, #28]
 8000452:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000456:	60fb      	str	r3, [r7, #12]
 8000458:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800045a:	4b40      	ldr	r3, [pc, #256]	; (800055c <HAL_UART_MspInit+0x13c>)
 800045c:	699b      	ldr	r3, [r3, #24]
 800045e:	4a3f      	ldr	r2, [pc, #252]	; (800055c <HAL_UART_MspInit+0x13c>)
 8000460:	f043 0308 	orr.w	r3, r3, #8
 8000464:	6193      	str	r3, [r2, #24]
 8000466:	4b3d      	ldr	r3, [pc, #244]	; (800055c <HAL_UART_MspInit+0x13c>)
 8000468:	699b      	ldr	r3, [r3, #24]
 800046a:	f003 0308 	and.w	r3, r3, #8
 800046e:	60bb      	str	r3, [r7, #8]
 8000470:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000472:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000476:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000478:	2302      	movs	r3, #2
 800047a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800047c:	2303      	movs	r3, #3
 800047e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000480:	f107 0310 	add.w	r3, r7, #16
 8000484:	4619      	mov	r1, r3
 8000486:	4836      	ldr	r0, [pc, #216]	; (8000560 <HAL_UART_MspInit+0x140>)
 8000488:	f000 fcf4 	bl	8000e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800048c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000490:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000492:	2300      	movs	r3, #0
 8000494:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000496:	2300      	movs	r3, #0
 8000498:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800049a:	f107 0310 	add.w	r3, r7, #16
 800049e:	4619      	mov	r1, r3
 80004a0:	482f      	ldr	r0, [pc, #188]	; (8000560 <HAL_UART_MspInit+0x140>)
 80004a2:	f000 fce7 	bl	8000e74 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80004a6:	4b2f      	ldr	r3, [pc, #188]	; (8000564 <HAL_UART_MspInit+0x144>)
 80004a8:	4a2f      	ldr	r2, [pc, #188]	; (8000568 <HAL_UART_MspInit+0x148>)
 80004aa:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80004ac:	4b2d      	ldr	r3, [pc, #180]	; (8000564 <HAL_UART_MspInit+0x144>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80004b2:	4b2c      	ldr	r3, [pc, #176]	; (8000564 <HAL_UART_MspInit+0x144>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80004b8:	4b2a      	ldr	r3, [pc, #168]	; (8000564 <HAL_UART_MspInit+0x144>)
 80004ba:	2280      	movs	r2, #128	; 0x80
 80004bc:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80004be:	4b29      	ldr	r3, [pc, #164]	; (8000564 <HAL_UART_MspInit+0x144>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80004c4:	4b27      	ldr	r3, [pc, #156]	; (8000564 <HAL_UART_MspInit+0x144>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80004ca:	4b26      	ldr	r3, [pc, #152]	; (8000564 <HAL_UART_MspInit+0x144>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80004d0:	4b24      	ldr	r3, [pc, #144]	; (8000564 <HAL_UART_MspInit+0x144>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80004d6:	4823      	ldr	r0, [pc, #140]	; (8000564 <HAL_UART_MspInit+0x144>)
 80004d8:	f000 fa2e 	bl	8000938 <HAL_DMA_Init>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80004e2:	f7ff ff66 	bl	80003b2 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	4a1e      	ldr	r2, [pc, #120]	; (8000564 <HAL_UART_MspInit+0x144>)
 80004ea:	639a      	str	r2, [r3, #56]	; 0x38
 80004ec:	4a1d      	ldr	r2, [pc, #116]	; (8000564 <HAL_UART_MspInit+0x144>)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 80004f2:	4b1e      	ldr	r3, [pc, #120]	; (800056c <HAL_UART_MspInit+0x14c>)
 80004f4:	4a1e      	ldr	r2, [pc, #120]	; (8000570 <HAL_UART_MspInit+0x150>)
 80004f6:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80004f8:	4b1c      	ldr	r3, [pc, #112]	; (800056c <HAL_UART_MspInit+0x14c>)
 80004fa:	2210      	movs	r2, #16
 80004fc:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80004fe:	4b1b      	ldr	r3, [pc, #108]	; (800056c <HAL_UART_MspInit+0x14c>)
 8000500:	2200      	movs	r2, #0
 8000502:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000504:	4b19      	ldr	r3, [pc, #100]	; (800056c <HAL_UART_MspInit+0x14c>)
 8000506:	2280      	movs	r2, #128	; 0x80
 8000508:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800050a:	4b18      	ldr	r3, [pc, #96]	; (800056c <HAL_UART_MspInit+0x14c>)
 800050c:	2200      	movs	r2, #0
 800050e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000510:	4b16      	ldr	r3, [pc, #88]	; (800056c <HAL_UART_MspInit+0x14c>)
 8000512:	2200      	movs	r2, #0
 8000514:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000516:	4b15      	ldr	r3, [pc, #84]	; (800056c <HAL_UART_MspInit+0x14c>)
 8000518:	2200      	movs	r2, #0
 800051a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800051c:	4b13      	ldr	r3, [pc, #76]	; (800056c <HAL_UART_MspInit+0x14c>)
 800051e:	2200      	movs	r2, #0
 8000520:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000522:	4812      	ldr	r0, [pc, #72]	; (800056c <HAL_UART_MspInit+0x14c>)
 8000524:	f000 fa08 	bl	8000938 <HAL_DMA_Init>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 800052e:	f7ff ff40 	bl	80003b2 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4a0d      	ldr	r2, [pc, #52]	; (800056c <HAL_UART_MspInit+0x14c>)
 8000536:	635a      	str	r2, [r3, #52]	; 0x34
 8000538:	4a0c      	ldr	r2, [pc, #48]	; (800056c <HAL_UART_MspInit+0x14c>)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800053e:	2200      	movs	r2, #0
 8000540:	2100      	movs	r1, #0
 8000542:	2027      	movs	r0, #39	; 0x27
 8000544:	f000 f9c1 	bl	80008ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000548:	2027      	movs	r0, #39	; 0x27
 800054a:	f000 f9da 	bl	8000902 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800054e:	bf00      	nop
 8000550:	3720      	adds	r7, #32
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40004800 	.word	0x40004800
 800055c:	40021000 	.word	0x40021000
 8000560:	40010c00 	.word	0x40010c00
 8000564:	20000038 	.word	0x20000038
 8000568:	40020030 	.word	0x40020030
 800056c:	200000c0 	.word	0x200000c0
 8000570:	4002001c 	.word	0x4002001c

08000574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000578:	e7fe      	b.n	8000578 <NMI_Handler+0x4>

0800057a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800057a:	b480      	push	{r7}
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800057e:	e7fe      	b.n	800057e <HardFault_Handler+0x4>

08000580 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000584:	e7fe      	b.n	8000584 <MemManage_Handler+0x4>

08000586 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000586:	b480      	push	{r7}
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800058a:	e7fe      	b.n	800058a <BusFault_Handler+0x4>

0800058c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000590:	e7fe      	b.n	8000590 <UsageFault_Handler+0x4>

08000592 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000592:	b480      	push	{r7}
 8000594:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000596:	bf00      	nop
 8000598:	46bd      	mov	sp, r7
 800059a:	bc80      	pop	{r7}
 800059c:	4770      	bx	lr

0800059e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800059e:	b480      	push	{r7}
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005a2:	bf00      	nop
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bc80      	pop	{r7}
 80005a8:	4770      	bx	lr

080005aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005aa:	b480      	push	{r7}
 80005ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005ae:	bf00      	nop
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bc80      	pop	{r7}
 80005b4:	4770      	bx	lr

080005b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005b6:	b580      	push	{r7, lr}
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005ba:	f000 f893 	bl	80006e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005be:	bf00      	nop
 80005c0:	bd80      	pop	{r7, pc}
	...

080005c4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80005c8:	4802      	ldr	r0, [pc, #8]	; (80005d4 <DMA1_Channel2_IRQHandler+0x10>)
 80005ca:	f000 fb1f 	bl	8000c0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	200000c0 	.word	0x200000c0

080005d8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80005dc:	4802      	ldr	r0, [pc, #8]	; (80005e8 <DMA1_Channel3_IRQHandler+0x10>)
 80005de:	f000 fb15 	bl	8000c0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80005e2:	bf00      	nop
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	20000038 	.word	0x20000038

080005ec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80005f0:	4802      	ldr	r0, [pc, #8]	; (80005fc <USART3_IRQHandler+0x10>)
 80005f2:	f001 faf9 	bl	8001be8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80005f6:	bf00      	nop
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	2000007c 	.word	0x2000007c

08000600 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr

0800060c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800060c:	480c      	ldr	r0, [pc, #48]	; (8000640 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800060e:	490d      	ldr	r1, [pc, #52]	; (8000644 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000610:	4a0d      	ldr	r2, [pc, #52]	; (8000648 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000612:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000614:	e002      	b.n	800061c <LoopCopyDataInit>

08000616 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000616:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000618:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800061a:	3304      	adds	r3, #4

0800061c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800061c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800061e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000620:	d3f9      	bcc.n	8000616 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000622:	4a0a      	ldr	r2, [pc, #40]	; (800064c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000624:	4c0a      	ldr	r4, [pc, #40]	; (8000650 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000626:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000628:	e001      	b.n	800062e <LoopFillZerobss>

0800062a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800062a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800062c:	3204      	adds	r2, #4

0800062e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800062e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000630:	d3fb      	bcc.n	800062a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000632:	f7ff ffe5 	bl	8000600 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000636:	f001 ffe7 	bl	8002608 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800063a:	f7ff fd87 	bl	800014c <main>
  bx lr
 800063e:	4770      	bx	lr
  ldr r0, =_sdata
 8000640:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000644:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000648:	080026a8 	.word	0x080026a8
  ldr r2, =_sbss
 800064c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000650:	20000108 	.word	0x20000108

08000654 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000654:	e7fe      	b.n	8000654 <ADC1_2_IRQHandler>
	...

08000658 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800065c:	4b08      	ldr	r3, [pc, #32]	; (8000680 <HAL_Init+0x28>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a07      	ldr	r2, [pc, #28]	; (8000680 <HAL_Init+0x28>)
 8000662:	f043 0310 	orr.w	r3, r3, #16
 8000666:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000668:	2003      	movs	r0, #3
 800066a:	f000 f923 	bl	80008b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800066e:	200f      	movs	r0, #15
 8000670:	f000 f808 	bl	8000684 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000674:	f7ff fea2 	bl	80003bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000678:	2300      	movs	r3, #0
}
 800067a:	4618      	mov	r0, r3
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40022000 	.word	0x40022000

08000684 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <HAL_InitTick+0x54>)
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	4b12      	ldr	r3, [pc, #72]	; (80006dc <HAL_InitTick+0x58>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	4619      	mov	r1, r3
 8000696:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800069a:	fbb3 f3f1 	udiv	r3, r3, r1
 800069e:	fbb2 f3f3 	udiv	r3, r2, r3
 80006a2:	4618      	mov	r0, r3
 80006a4:	f000 f93b 	bl	800091e <HAL_SYSTICK_Config>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006ae:	2301      	movs	r3, #1
 80006b0:	e00e      	b.n	80006d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	2b0f      	cmp	r3, #15
 80006b6:	d80a      	bhi.n	80006ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006b8:	2200      	movs	r2, #0
 80006ba:	6879      	ldr	r1, [r7, #4]
 80006bc:	f04f 30ff 	mov.w	r0, #4294967295
 80006c0:	f000 f903 	bl	80008ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006c4:	4a06      	ldr	r2, [pc, #24]	; (80006e0 <HAL_InitTick+0x5c>)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006ca:	2300      	movs	r3, #0
 80006cc:	e000      	b.n	80006d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006ce:	2301      	movs	r3, #1
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000000 	.word	0x20000000
 80006dc:	20000008 	.word	0x20000008
 80006e0:	20000004 	.word	0x20000004

080006e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006e8:	4b05      	ldr	r3, [pc, #20]	; (8000700 <HAL_IncTick+0x1c>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	461a      	mov	r2, r3
 80006ee:	4b05      	ldr	r3, [pc, #20]	; (8000704 <HAL_IncTick+0x20>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4413      	add	r3, r2
 80006f4:	4a03      	ldr	r2, [pc, #12]	; (8000704 <HAL_IncTick+0x20>)
 80006f6:	6013      	str	r3, [r2, #0]
}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr
 8000700:	20000008 	.word	0x20000008
 8000704:	20000104 	.word	0x20000104

08000708 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  return uwTick;
 800070c:	4b02      	ldr	r3, [pc, #8]	; (8000718 <HAL_GetTick+0x10>)
 800070e:	681b      	ldr	r3, [r3, #0]
}
 8000710:	4618      	mov	r0, r3
 8000712:	46bd      	mov	sp, r7
 8000714:	bc80      	pop	{r7}
 8000716:	4770      	bx	lr
 8000718:	20000104 	.word	0x20000104

0800071c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800071c:	b480      	push	{r7}
 800071e:	b085      	sub	sp, #20
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	f003 0307 	and.w	r3, r3, #7
 800072a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <__NVIC_SetPriorityGrouping+0x44>)
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000732:	68ba      	ldr	r2, [r7, #8]
 8000734:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000738:	4013      	ands	r3, r2
 800073a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000744:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800074c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800074e:	4a04      	ldr	r2, [pc, #16]	; (8000760 <__NVIC_SetPriorityGrouping+0x44>)
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	60d3      	str	r3, [r2, #12]
}
 8000754:	bf00      	nop
 8000756:	3714      	adds	r7, #20
 8000758:	46bd      	mov	sp, r7
 800075a:	bc80      	pop	{r7}
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	e000ed00 	.word	0xe000ed00

08000764 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000768:	4b04      	ldr	r3, [pc, #16]	; (800077c <__NVIC_GetPriorityGrouping+0x18>)
 800076a:	68db      	ldr	r3, [r3, #12]
 800076c:	0a1b      	lsrs	r3, r3, #8
 800076e:	f003 0307 	and.w	r3, r3, #7
}
 8000772:	4618      	mov	r0, r3
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800078a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800078e:	2b00      	cmp	r3, #0
 8000790:	db0b      	blt.n	80007aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	f003 021f 	and.w	r2, r3, #31
 8000798:	4906      	ldr	r1, [pc, #24]	; (80007b4 <__NVIC_EnableIRQ+0x34>)
 800079a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079e:	095b      	lsrs	r3, r3, #5
 80007a0:	2001      	movs	r0, #1
 80007a2:	fa00 f202 	lsl.w	r2, r0, r2
 80007a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007aa:	bf00      	nop
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr
 80007b4:	e000e100 	.word	0xe000e100

080007b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	6039      	str	r1, [r7, #0]
 80007c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	db0a      	blt.n	80007e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	490c      	ldr	r1, [pc, #48]	; (8000804 <__NVIC_SetPriority+0x4c>)
 80007d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d6:	0112      	lsls	r2, r2, #4
 80007d8:	b2d2      	uxtb	r2, r2
 80007da:	440b      	add	r3, r1
 80007dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007e0:	e00a      	b.n	80007f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	4908      	ldr	r1, [pc, #32]	; (8000808 <__NVIC_SetPriority+0x50>)
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	f003 030f 	and.w	r3, r3, #15
 80007ee:	3b04      	subs	r3, #4
 80007f0:	0112      	lsls	r2, r2, #4
 80007f2:	b2d2      	uxtb	r2, r2
 80007f4:	440b      	add	r3, r1
 80007f6:	761a      	strb	r2, [r3, #24]
}
 80007f8:	bf00      	nop
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bc80      	pop	{r7}
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	e000e100 	.word	0xe000e100
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800080c:	b480      	push	{r7}
 800080e:	b089      	sub	sp, #36	; 0x24
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	f003 0307 	and.w	r3, r3, #7
 800081e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000820:	69fb      	ldr	r3, [r7, #28]
 8000822:	f1c3 0307 	rsb	r3, r3, #7
 8000826:	2b04      	cmp	r3, #4
 8000828:	bf28      	it	cs
 800082a:	2304      	movcs	r3, #4
 800082c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800082e:	69fb      	ldr	r3, [r7, #28]
 8000830:	3304      	adds	r3, #4
 8000832:	2b06      	cmp	r3, #6
 8000834:	d902      	bls.n	800083c <NVIC_EncodePriority+0x30>
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	3b03      	subs	r3, #3
 800083a:	e000      	b.n	800083e <NVIC_EncodePriority+0x32>
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000840:	f04f 32ff 	mov.w	r2, #4294967295
 8000844:	69bb      	ldr	r3, [r7, #24]
 8000846:	fa02 f303 	lsl.w	r3, r2, r3
 800084a:	43da      	mvns	r2, r3
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	401a      	ands	r2, r3
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000854:	f04f 31ff 	mov.w	r1, #4294967295
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	fa01 f303 	lsl.w	r3, r1, r3
 800085e:	43d9      	mvns	r1, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000864:	4313      	orrs	r3, r2
         );
}
 8000866:	4618      	mov	r0, r3
 8000868:	3724      	adds	r7, #36	; 0x24
 800086a:	46bd      	mov	sp, r7
 800086c:	bc80      	pop	{r7}
 800086e:	4770      	bx	lr

08000870 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	3b01      	subs	r3, #1
 800087c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000880:	d301      	bcc.n	8000886 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000882:	2301      	movs	r3, #1
 8000884:	e00f      	b.n	80008a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000886:	4a0a      	ldr	r2, [pc, #40]	; (80008b0 <SysTick_Config+0x40>)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	3b01      	subs	r3, #1
 800088c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800088e:	210f      	movs	r1, #15
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	f7ff ff90 	bl	80007b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000898:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <SysTick_Config+0x40>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800089e:	4b04      	ldr	r3, [pc, #16]	; (80008b0 <SysTick_Config+0x40>)
 80008a0:	2207      	movs	r2, #7
 80008a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008a4:	2300      	movs	r3, #0
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	e000e010 	.word	0xe000e010

080008b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008bc:	6878      	ldr	r0, [r7, #4]
 80008be:	f7ff ff2d 	bl	800071c <__NVIC_SetPriorityGrouping>
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b086      	sub	sp, #24
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	4603      	mov	r3, r0
 80008d2:	60b9      	str	r1, [r7, #8]
 80008d4:	607a      	str	r2, [r7, #4]
 80008d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008d8:	2300      	movs	r3, #0
 80008da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008dc:	f7ff ff42 	bl	8000764 <__NVIC_GetPriorityGrouping>
 80008e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008e2:	687a      	ldr	r2, [r7, #4]
 80008e4:	68b9      	ldr	r1, [r7, #8]
 80008e6:	6978      	ldr	r0, [r7, #20]
 80008e8:	f7ff ff90 	bl	800080c <NVIC_EncodePriority>
 80008ec:	4602      	mov	r2, r0
 80008ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008f2:	4611      	mov	r1, r2
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff ff5f 	bl	80007b8 <__NVIC_SetPriority>
}
 80008fa:	bf00      	nop
 80008fc:	3718      	adds	r7, #24
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	b082      	sub	sp, #8
 8000906:	af00      	add	r7, sp, #0
 8000908:	4603      	mov	r3, r0
 800090a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800090c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff ff35 	bl	8000780 <__NVIC_EnableIRQ>
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	b082      	sub	sp, #8
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000926:	6878      	ldr	r0, [r7, #4]
 8000928:	f7ff ffa2 	bl	8000870 <SysTick_Config>
 800092c:	4603      	mov	r3, r0
}
 800092e:	4618      	mov	r0, r3
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
	...

08000938 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000938:	b480      	push	{r7}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000940:	2300      	movs	r3, #0
 8000942:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d101      	bne.n	800094e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800094a:	2301      	movs	r3, #1
 800094c:	e043      	b.n	80009d6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	461a      	mov	r2, r3
 8000954:	4b22      	ldr	r3, [pc, #136]	; (80009e0 <HAL_DMA_Init+0xa8>)
 8000956:	4413      	add	r3, r2
 8000958:	4a22      	ldr	r2, [pc, #136]	; (80009e4 <HAL_DMA_Init+0xac>)
 800095a:	fba2 2303 	umull	r2, r3, r2, r3
 800095e:	091b      	lsrs	r3, r3, #4
 8000960:	009a      	lsls	r2, r3, #2
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4a1f      	ldr	r2, [pc, #124]	; (80009e8 <HAL_DMA_Init+0xb0>)
 800096a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2202      	movs	r2, #2
 8000970:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000982:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000986:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000990:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	68db      	ldr	r3, [r3, #12]
 8000996:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800099c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	695b      	ldr	r3, [r3, #20]
 80009a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	69db      	ldr	r3, [r3, #28]
 80009ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80009b0:	68fa      	ldr	r2, [r7, #12]
 80009b2:	4313      	orrs	r3, r2
 80009b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	68fa      	ldr	r2, [r7, #12]
 80009bc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2200      	movs	r2, #0
 80009c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2201      	movs	r2, #1
 80009c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2200      	movs	r2, #0
 80009d0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80009d4:	2300      	movs	r3, #0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3714      	adds	r7, #20
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr
 80009e0:	bffdfff8 	.word	0xbffdfff8
 80009e4:	cccccccd 	.word	0xcccccccd
 80009e8:	40020000 	.word	0x40020000

080009ec <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	60b9      	str	r1, [r7, #8]
 80009f6:	607a      	str	r2, [r7, #4]
 80009f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80009fa:	2300      	movs	r3, #0
 80009fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d101      	bne.n	8000a0c <HAL_DMA_Start_IT+0x20>
 8000a08:	2302      	movs	r3, #2
 8000a0a:	e04a      	b.n	8000aa2 <HAL_DMA_Start_IT+0xb6>
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	2201      	movs	r2, #1
 8000a10:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d13a      	bne.n	8000a94 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	2202      	movs	r2, #2
 8000a22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	2200      	movs	r2, #0
 8000a2a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f022 0201 	bic.w	r2, r2, #1
 8000a3a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	68b9      	ldr	r1, [r7, #8]
 8000a42:	68f8      	ldr	r0, [r7, #12]
 8000a44:	f000 f9e8 	bl	8000e18 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d008      	beq.n	8000a62 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f042 020e 	orr.w	r2, r2, #14
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	e00f      	b.n	8000a82 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f022 0204 	bic.w	r2, r2, #4
 8000a70:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f042 020a 	orr.w	r2, r2, #10
 8000a80:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f042 0201 	orr.w	r2, r2, #1
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	e005      	b.n	8000aa0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	2200      	movs	r2, #0
 8000a98:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000aa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3718      	adds	r7, #24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	b085      	sub	sp, #20
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000abc:	2b02      	cmp	r3, #2
 8000abe:	d008      	beq.n	8000ad2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2204      	movs	r2, #4
 8000ac4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2200      	movs	r2, #0
 8000aca:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e020      	b.n	8000b14 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f022 020e 	bic.w	r2, r2, #14
 8000ae0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f022 0201 	bic.w	r2, r2, #1
 8000af0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000afa:	2101      	movs	r1, #1
 8000afc:	fa01 f202 	lsl.w	r2, r1, r2
 8000b00:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2201      	movs	r2, #1
 8000b06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3714      	adds	r7, #20
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bc80      	pop	{r7}
 8000b1c:	4770      	bx	lr
	...

08000b20 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b32:	2b02      	cmp	r3, #2
 8000b34:	d005      	beq.n	8000b42 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2204      	movs	r2, #4
 8000b3a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	73fb      	strb	r3, [r7, #15]
 8000b40:	e051      	b.n	8000be6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f022 020e 	bic.w	r2, r2, #14
 8000b50:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f022 0201 	bic.w	r2, r2, #1
 8000b60:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a22      	ldr	r2, [pc, #136]	; (8000bf0 <HAL_DMA_Abort_IT+0xd0>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d029      	beq.n	8000bc0 <HAL_DMA_Abort_IT+0xa0>
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a20      	ldr	r2, [pc, #128]	; (8000bf4 <HAL_DMA_Abort_IT+0xd4>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d022      	beq.n	8000bbc <HAL_DMA_Abort_IT+0x9c>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a1f      	ldr	r2, [pc, #124]	; (8000bf8 <HAL_DMA_Abort_IT+0xd8>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d01a      	beq.n	8000bb6 <HAL_DMA_Abort_IT+0x96>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a1d      	ldr	r2, [pc, #116]	; (8000bfc <HAL_DMA_Abort_IT+0xdc>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d012      	beq.n	8000bb0 <HAL_DMA_Abort_IT+0x90>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a1c      	ldr	r2, [pc, #112]	; (8000c00 <HAL_DMA_Abort_IT+0xe0>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d00a      	beq.n	8000baa <HAL_DMA_Abort_IT+0x8a>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a1a      	ldr	r2, [pc, #104]	; (8000c04 <HAL_DMA_Abort_IT+0xe4>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d102      	bne.n	8000ba4 <HAL_DMA_Abort_IT+0x84>
 8000b9e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ba2:	e00e      	b.n	8000bc2 <HAL_DMA_Abort_IT+0xa2>
 8000ba4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ba8:	e00b      	b.n	8000bc2 <HAL_DMA_Abort_IT+0xa2>
 8000baa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bae:	e008      	b.n	8000bc2 <HAL_DMA_Abort_IT+0xa2>
 8000bb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bb4:	e005      	b.n	8000bc2 <HAL_DMA_Abort_IT+0xa2>
 8000bb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bba:	e002      	b.n	8000bc2 <HAL_DMA_Abort_IT+0xa2>
 8000bbc:	2310      	movs	r3, #16
 8000bbe:	e000      	b.n	8000bc2 <HAL_DMA_Abort_IT+0xa2>
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	4a11      	ldr	r2, [pc, #68]	; (8000c08 <HAL_DMA_Abort_IT+0xe8>)
 8000bc4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2201      	movs	r2, #1
 8000bca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d003      	beq.n	8000be6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	4798      	blx	r3
    } 
  }
  return status;
 8000be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3710      	adds	r7, #16
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40020008 	.word	0x40020008
 8000bf4:	4002001c 	.word	0x4002001c
 8000bf8:	40020030 	.word	0x40020030
 8000bfc:	40020044 	.word	0x40020044
 8000c00:	40020058 	.word	0x40020058
 8000c04:	4002006c 	.word	0x4002006c
 8000c08:	40020000 	.word	0x40020000

08000c0c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c28:	2204      	movs	r2, #4
 8000c2a:	409a      	lsls	r2, r3
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	4013      	ands	r3, r2
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d04f      	beq.n	8000cd4 <HAL_DMA_IRQHandler+0xc8>
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	f003 0304 	and.w	r3, r3, #4
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d04a      	beq.n	8000cd4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f003 0320 	and.w	r3, r3, #32
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d107      	bne.n	8000c5c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f022 0204 	bic.w	r2, r2, #4
 8000c5a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a66      	ldr	r2, [pc, #408]	; (8000dfc <HAL_DMA_IRQHandler+0x1f0>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d029      	beq.n	8000cba <HAL_DMA_IRQHandler+0xae>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a65      	ldr	r2, [pc, #404]	; (8000e00 <HAL_DMA_IRQHandler+0x1f4>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d022      	beq.n	8000cb6 <HAL_DMA_IRQHandler+0xaa>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a63      	ldr	r2, [pc, #396]	; (8000e04 <HAL_DMA_IRQHandler+0x1f8>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d01a      	beq.n	8000cb0 <HAL_DMA_IRQHandler+0xa4>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a62      	ldr	r2, [pc, #392]	; (8000e08 <HAL_DMA_IRQHandler+0x1fc>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d012      	beq.n	8000caa <HAL_DMA_IRQHandler+0x9e>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a60      	ldr	r2, [pc, #384]	; (8000e0c <HAL_DMA_IRQHandler+0x200>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d00a      	beq.n	8000ca4 <HAL_DMA_IRQHandler+0x98>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a5f      	ldr	r2, [pc, #380]	; (8000e10 <HAL_DMA_IRQHandler+0x204>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d102      	bne.n	8000c9e <HAL_DMA_IRQHandler+0x92>
 8000c98:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c9c:	e00e      	b.n	8000cbc <HAL_DMA_IRQHandler+0xb0>
 8000c9e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000ca2:	e00b      	b.n	8000cbc <HAL_DMA_IRQHandler+0xb0>
 8000ca4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000ca8:	e008      	b.n	8000cbc <HAL_DMA_IRQHandler+0xb0>
 8000caa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000cae:	e005      	b.n	8000cbc <HAL_DMA_IRQHandler+0xb0>
 8000cb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cb4:	e002      	b.n	8000cbc <HAL_DMA_IRQHandler+0xb0>
 8000cb6:	2340      	movs	r3, #64	; 0x40
 8000cb8:	e000      	b.n	8000cbc <HAL_DMA_IRQHandler+0xb0>
 8000cba:	2304      	movs	r3, #4
 8000cbc:	4a55      	ldr	r2, [pc, #340]	; (8000e14 <HAL_DMA_IRQHandler+0x208>)
 8000cbe:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	f000 8094 	beq.w	8000df2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000cd2:	e08e      	b.n	8000df2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd8:	2202      	movs	r2, #2
 8000cda:	409a      	lsls	r2, r3
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d056      	beq.n	8000d92 <HAL_DMA_IRQHandler+0x186>
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	f003 0302 	and.w	r3, r3, #2
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d051      	beq.n	8000d92 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f003 0320 	and.w	r3, r3, #32
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d10b      	bne.n	8000d14 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f022 020a 	bic.w	r2, r2, #10
 8000d0a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2201      	movs	r2, #1
 8000d10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a38      	ldr	r2, [pc, #224]	; (8000dfc <HAL_DMA_IRQHandler+0x1f0>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d029      	beq.n	8000d72 <HAL_DMA_IRQHandler+0x166>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a37      	ldr	r2, [pc, #220]	; (8000e00 <HAL_DMA_IRQHandler+0x1f4>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d022      	beq.n	8000d6e <HAL_DMA_IRQHandler+0x162>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a35      	ldr	r2, [pc, #212]	; (8000e04 <HAL_DMA_IRQHandler+0x1f8>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d01a      	beq.n	8000d68 <HAL_DMA_IRQHandler+0x15c>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a34      	ldr	r2, [pc, #208]	; (8000e08 <HAL_DMA_IRQHandler+0x1fc>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d012      	beq.n	8000d62 <HAL_DMA_IRQHandler+0x156>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a32      	ldr	r2, [pc, #200]	; (8000e0c <HAL_DMA_IRQHandler+0x200>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d00a      	beq.n	8000d5c <HAL_DMA_IRQHandler+0x150>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a31      	ldr	r2, [pc, #196]	; (8000e10 <HAL_DMA_IRQHandler+0x204>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d102      	bne.n	8000d56 <HAL_DMA_IRQHandler+0x14a>
 8000d50:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000d54:	e00e      	b.n	8000d74 <HAL_DMA_IRQHandler+0x168>
 8000d56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d5a:	e00b      	b.n	8000d74 <HAL_DMA_IRQHandler+0x168>
 8000d5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d60:	e008      	b.n	8000d74 <HAL_DMA_IRQHandler+0x168>
 8000d62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d66:	e005      	b.n	8000d74 <HAL_DMA_IRQHandler+0x168>
 8000d68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d6c:	e002      	b.n	8000d74 <HAL_DMA_IRQHandler+0x168>
 8000d6e:	2320      	movs	r3, #32
 8000d70:	e000      	b.n	8000d74 <HAL_DMA_IRQHandler+0x168>
 8000d72:	2302      	movs	r3, #2
 8000d74:	4a27      	ldr	r2, [pc, #156]	; (8000e14 <HAL_DMA_IRQHandler+0x208>)
 8000d76:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d034      	beq.n	8000df2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000d90:	e02f      	b.n	8000df2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d96:	2208      	movs	r2, #8
 8000d98:	409a      	lsls	r2, r3
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d028      	beq.n	8000df4 <HAL_DMA_IRQHandler+0x1e8>
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	f003 0308 	and.w	r3, r3, #8
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d023      	beq.n	8000df4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f022 020e 	bic.w	r2, r2, #14
 8000dba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	fa01 f202 	lsl.w	r2, r1, r2
 8000dca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2201      	movs	r2, #1
 8000dd0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d004      	beq.n	8000df4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	4798      	blx	r3
    }
  }
  return;
 8000df2:	bf00      	nop
 8000df4:	bf00      	nop
}
 8000df6:	3710      	adds	r7, #16
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40020008 	.word	0x40020008
 8000e00:	4002001c 	.word	0x4002001c
 8000e04:	40020030 	.word	0x40020030
 8000e08:	40020044 	.word	0x40020044
 8000e0c:	40020058 	.word	0x40020058
 8000e10:	4002006c 	.word	0x4002006c
 8000e14:	40020000 	.word	0x40020000

08000e18 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
 8000e24:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fa01 f202 	lsl.w	r2, r1, r2
 8000e34:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	683a      	ldr	r2, [r7, #0]
 8000e3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	2b10      	cmp	r3, #16
 8000e44:	d108      	bne.n	8000e58 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	68ba      	ldr	r2, [r7, #8]
 8000e54:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000e56:	e007      	b.n	8000e68 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	68ba      	ldr	r2, [r7, #8]
 8000e5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	687a      	ldr	r2, [r7, #4]
 8000e66:	60da      	str	r2, [r3, #12]
}
 8000e68:	bf00      	nop
 8000e6a:	3714      	adds	r7, #20
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bc80      	pop	{r7}
 8000e70:	4770      	bx	lr
	...

08000e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b08b      	sub	sp, #44	; 0x2c
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e82:	2300      	movs	r3, #0
 8000e84:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e86:	e169      	b.n	800115c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e88:	2201      	movs	r2, #1
 8000e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	69fa      	ldr	r2, [r7, #28]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	f040 8158 	bne.w	8001156 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	4a9a      	ldr	r2, [pc, #616]	; (8001114 <HAL_GPIO_Init+0x2a0>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d05e      	beq.n	8000f6e <HAL_GPIO_Init+0xfa>
 8000eb0:	4a98      	ldr	r2, [pc, #608]	; (8001114 <HAL_GPIO_Init+0x2a0>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d875      	bhi.n	8000fa2 <HAL_GPIO_Init+0x12e>
 8000eb6:	4a98      	ldr	r2, [pc, #608]	; (8001118 <HAL_GPIO_Init+0x2a4>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d058      	beq.n	8000f6e <HAL_GPIO_Init+0xfa>
 8000ebc:	4a96      	ldr	r2, [pc, #600]	; (8001118 <HAL_GPIO_Init+0x2a4>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d86f      	bhi.n	8000fa2 <HAL_GPIO_Init+0x12e>
 8000ec2:	4a96      	ldr	r2, [pc, #600]	; (800111c <HAL_GPIO_Init+0x2a8>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d052      	beq.n	8000f6e <HAL_GPIO_Init+0xfa>
 8000ec8:	4a94      	ldr	r2, [pc, #592]	; (800111c <HAL_GPIO_Init+0x2a8>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d869      	bhi.n	8000fa2 <HAL_GPIO_Init+0x12e>
 8000ece:	4a94      	ldr	r2, [pc, #592]	; (8001120 <HAL_GPIO_Init+0x2ac>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d04c      	beq.n	8000f6e <HAL_GPIO_Init+0xfa>
 8000ed4:	4a92      	ldr	r2, [pc, #584]	; (8001120 <HAL_GPIO_Init+0x2ac>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d863      	bhi.n	8000fa2 <HAL_GPIO_Init+0x12e>
 8000eda:	4a92      	ldr	r2, [pc, #584]	; (8001124 <HAL_GPIO_Init+0x2b0>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d046      	beq.n	8000f6e <HAL_GPIO_Init+0xfa>
 8000ee0:	4a90      	ldr	r2, [pc, #576]	; (8001124 <HAL_GPIO_Init+0x2b0>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d85d      	bhi.n	8000fa2 <HAL_GPIO_Init+0x12e>
 8000ee6:	2b12      	cmp	r3, #18
 8000ee8:	d82a      	bhi.n	8000f40 <HAL_GPIO_Init+0xcc>
 8000eea:	2b12      	cmp	r3, #18
 8000eec:	d859      	bhi.n	8000fa2 <HAL_GPIO_Init+0x12e>
 8000eee:	a201      	add	r2, pc, #4	; (adr r2, 8000ef4 <HAL_GPIO_Init+0x80>)
 8000ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef4:	08000f6f 	.word	0x08000f6f
 8000ef8:	08000f49 	.word	0x08000f49
 8000efc:	08000f5b 	.word	0x08000f5b
 8000f00:	08000f9d 	.word	0x08000f9d
 8000f04:	08000fa3 	.word	0x08000fa3
 8000f08:	08000fa3 	.word	0x08000fa3
 8000f0c:	08000fa3 	.word	0x08000fa3
 8000f10:	08000fa3 	.word	0x08000fa3
 8000f14:	08000fa3 	.word	0x08000fa3
 8000f18:	08000fa3 	.word	0x08000fa3
 8000f1c:	08000fa3 	.word	0x08000fa3
 8000f20:	08000fa3 	.word	0x08000fa3
 8000f24:	08000fa3 	.word	0x08000fa3
 8000f28:	08000fa3 	.word	0x08000fa3
 8000f2c:	08000fa3 	.word	0x08000fa3
 8000f30:	08000fa3 	.word	0x08000fa3
 8000f34:	08000fa3 	.word	0x08000fa3
 8000f38:	08000f51 	.word	0x08000f51
 8000f3c:	08000f65 	.word	0x08000f65
 8000f40:	4a79      	ldr	r2, [pc, #484]	; (8001128 <HAL_GPIO_Init+0x2b4>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d013      	beq.n	8000f6e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f46:	e02c      	b.n	8000fa2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	623b      	str	r3, [r7, #32]
          break;
 8000f4e:	e029      	b.n	8000fa4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	3304      	adds	r3, #4
 8000f56:	623b      	str	r3, [r7, #32]
          break;
 8000f58:	e024      	b.n	8000fa4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	68db      	ldr	r3, [r3, #12]
 8000f5e:	3308      	adds	r3, #8
 8000f60:	623b      	str	r3, [r7, #32]
          break;
 8000f62:	e01f      	b.n	8000fa4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	330c      	adds	r3, #12
 8000f6a:	623b      	str	r3, [r7, #32]
          break;
 8000f6c:	e01a      	b.n	8000fa4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d102      	bne.n	8000f7c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f76:	2304      	movs	r3, #4
 8000f78:	623b      	str	r3, [r7, #32]
          break;
 8000f7a:	e013      	b.n	8000fa4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d105      	bne.n	8000f90 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f84:	2308      	movs	r3, #8
 8000f86:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	69fa      	ldr	r2, [r7, #28]
 8000f8c:	611a      	str	r2, [r3, #16]
          break;
 8000f8e:	e009      	b.n	8000fa4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f90:	2308      	movs	r3, #8
 8000f92:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	69fa      	ldr	r2, [r7, #28]
 8000f98:	615a      	str	r2, [r3, #20]
          break;
 8000f9a:	e003      	b.n	8000fa4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	623b      	str	r3, [r7, #32]
          break;
 8000fa0:	e000      	b.n	8000fa4 <HAL_GPIO_Init+0x130>
          break;
 8000fa2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	2bff      	cmp	r3, #255	; 0xff
 8000fa8:	d801      	bhi.n	8000fae <HAL_GPIO_Init+0x13a>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	e001      	b.n	8000fb2 <HAL_GPIO_Init+0x13e>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	3304      	adds	r3, #4
 8000fb2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	2bff      	cmp	r3, #255	; 0xff
 8000fb8:	d802      	bhi.n	8000fc0 <HAL_GPIO_Init+0x14c>
 8000fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	e002      	b.n	8000fc6 <HAL_GPIO_Init+0x152>
 8000fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc2:	3b08      	subs	r3, #8
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	210f      	movs	r1, #15
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	401a      	ands	r2, r3
 8000fd8:	6a39      	ldr	r1, [r7, #32]
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe0:	431a      	orrs	r2, r3
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	f000 80b1 	beq.w	8001156 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ff4:	4b4d      	ldr	r3, [pc, #308]	; (800112c <HAL_GPIO_Init+0x2b8>)
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	4a4c      	ldr	r2, [pc, #304]	; (800112c <HAL_GPIO_Init+0x2b8>)
 8000ffa:	f043 0301 	orr.w	r3, r3, #1
 8000ffe:	6193      	str	r3, [r2, #24]
 8001000:	4b4a      	ldr	r3, [pc, #296]	; (800112c <HAL_GPIO_Init+0x2b8>)
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	f003 0301 	and.w	r3, r3, #1
 8001008:	60bb      	str	r3, [r7, #8]
 800100a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800100c:	4a48      	ldr	r2, [pc, #288]	; (8001130 <HAL_GPIO_Init+0x2bc>)
 800100e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001010:	089b      	lsrs	r3, r3, #2
 8001012:	3302      	adds	r3, #2
 8001014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001018:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800101a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101c:	f003 0303 	and.w	r3, r3, #3
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	220f      	movs	r2, #15
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	68fa      	ldr	r2, [r7, #12]
 800102c:	4013      	ands	r3, r2
 800102e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a40      	ldr	r2, [pc, #256]	; (8001134 <HAL_GPIO_Init+0x2c0>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d013      	beq.n	8001060 <HAL_GPIO_Init+0x1ec>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4a3f      	ldr	r2, [pc, #252]	; (8001138 <HAL_GPIO_Init+0x2c4>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d00d      	beq.n	800105c <HAL_GPIO_Init+0x1e8>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4a3e      	ldr	r2, [pc, #248]	; (800113c <HAL_GPIO_Init+0x2c8>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d007      	beq.n	8001058 <HAL_GPIO_Init+0x1e4>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4a3d      	ldr	r2, [pc, #244]	; (8001140 <HAL_GPIO_Init+0x2cc>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d101      	bne.n	8001054 <HAL_GPIO_Init+0x1e0>
 8001050:	2303      	movs	r3, #3
 8001052:	e006      	b.n	8001062 <HAL_GPIO_Init+0x1ee>
 8001054:	2304      	movs	r3, #4
 8001056:	e004      	b.n	8001062 <HAL_GPIO_Init+0x1ee>
 8001058:	2302      	movs	r3, #2
 800105a:	e002      	b.n	8001062 <HAL_GPIO_Init+0x1ee>
 800105c:	2301      	movs	r3, #1
 800105e:	e000      	b.n	8001062 <HAL_GPIO_Init+0x1ee>
 8001060:	2300      	movs	r3, #0
 8001062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001064:	f002 0203 	and.w	r2, r2, #3
 8001068:	0092      	lsls	r2, r2, #2
 800106a:	4093      	lsls	r3, r2
 800106c:	68fa      	ldr	r2, [r7, #12]
 800106e:	4313      	orrs	r3, r2
 8001070:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001072:	492f      	ldr	r1, [pc, #188]	; (8001130 <HAL_GPIO_Init+0x2bc>)
 8001074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001076:	089b      	lsrs	r3, r3, #2
 8001078:	3302      	adds	r3, #2
 800107a:	68fa      	ldr	r2, [r7, #12]
 800107c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d006      	beq.n	800109a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800108c:	4b2d      	ldr	r3, [pc, #180]	; (8001144 <HAL_GPIO_Init+0x2d0>)
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	492c      	ldr	r1, [pc, #176]	; (8001144 <HAL_GPIO_Init+0x2d0>)
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	4313      	orrs	r3, r2
 8001096:	600b      	str	r3, [r1, #0]
 8001098:	e006      	b.n	80010a8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800109a:	4b2a      	ldr	r3, [pc, #168]	; (8001144 <HAL_GPIO_Init+0x2d0>)
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	43db      	mvns	r3, r3
 80010a2:	4928      	ldr	r1, [pc, #160]	; (8001144 <HAL_GPIO_Init+0x2d0>)
 80010a4:	4013      	ands	r3, r2
 80010a6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d006      	beq.n	80010c2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010b4:	4b23      	ldr	r3, [pc, #140]	; (8001144 <HAL_GPIO_Init+0x2d0>)
 80010b6:	685a      	ldr	r2, [r3, #4]
 80010b8:	4922      	ldr	r1, [pc, #136]	; (8001144 <HAL_GPIO_Init+0x2d0>)
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	4313      	orrs	r3, r2
 80010be:	604b      	str	r3, [r1, #4]
 80010c0:	e006      	b.n	80010d0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010c2:	4b20      	ldr	r3, [pc, #128]	; (8001144 <HAL_GPIO_Init+0x2d0>)
 80010c4:	685a      	ldr	r2, [r3, #4]
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	43db      	mvns	r3, r3
 80010ca:	491e      	ldr	r1, [pc, #120]	; (8001144 <HAL_GPIO_Init+0x2d0>)
 80010cc:	4013      	ands	r3, r2
 80010ce:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d006      	beq.n	80010ea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010dc:	4b19      	ldr	r3, [pc, #100]	; (8001144 <HAL_GPIO_Init+0x2d0>)
 80010de:	689a      	ldr	r2, [r3, #8]
 80010e0:	4918      	ldr	r1, [pc, #96]	; (8001144 <HAL_GPIO_Init+0x2d0>)
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	608b      	str	r3, [r1, #8]
 80010e8:	e006      	b.n	80010f8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010ea:	4b16      	ldr	r3, [pc, #88]	; (8001144 <HAL_GPIO_Init+0x2d0>)
 80010ec:	689a      	ldr	r2, [r3, #8]
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	43db      	mvns	r3, r3
 80010f2:	4914      	ldr	r1, [pc, #80]	; (8001144 <HAL_GPIO_Init+0x2d0>)
 80010f4:	4013      	ands	r3, r2
 80010f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d021      	beq.n	8001148 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001104:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <HAL_GPIO_Init+0x2d0>)
 8001106:	68da      	ldr	r2, [r3, #12]
 8001108:	490e      	ldr	r1, [pc, #56]	; (8001144 <HAL_GPIO_Init+0x2d0>)
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	4313      	orrs	r3, r2
 800110e:	60cb      	str	r3, [r1, #12]
 8001110:	e021      	b.n	8001156 <HAL_GPIO_Init+0x2e2>
 8001112:	bf00      	nop
 8001114:	10320000 	.word	0x10320000
 8001118:	10310000 	.word	0x10310000
 800111c:	10220000 	.word	0x10220000
 8001120:	10210000 	.word	0x10210000
 8001124:	10120000 	.word	0x10120000
 8001128:	10110000 	.word	0x10110000
 800112c:	40021000 	.word	0x40021000
 8001130:	40010000 	.word	0x40010000
 8001134:	40010800 	.word	0x40010800
 8001138:	40010c00 	.word	0x40010c00
 800113c:	40011000 	.word	0x40011000
 8001140:	40011400 	.word	0x40011400
 8001144:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001148:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <HAL_GPIO_Init+0x304>)
 800114a:	68da      	ldr	r2, [r3, #12]
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	43db      	mvns	r3, r3
 8001150:	4909      	ldr	r1, [pc, #36]	; (8001178 <HAL_GPIO_Init+0x304>)
 8001152:	4013      	ands	r3, r2
 8001154:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001158:	3301      	adds	r3, #1
 800115a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001162:	fa22 f303 	lsr.w	r3, r2, r3
 8001166:	2b00      	cmp	r3, #0
 8001168:	f47f ae8e 	bne.w	8000e88 <HAL_GPIO_Init+0x14>
  }
}
 800116c:	bf00      	nop
 800116e:	bf00      	nop
 8001170:	372c      	adds	r7, #44	; 0x2c
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr
 8001178:	40010400 	.word	0x40010400

0800117c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	460b      	mov	r3, r1
 8001186:	807b      	strh	r3, [r7, #2]
 8001188:	4613      	mov	r3, r2
 800118a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800118c:	787b      	ldrb	r3, [r7, #1]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001192:	887a      	ldrh	r2, [r7, #2]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001198:	e003      	b.n	80011a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800119a:	887b      	ldrh	r3, [r7, #2]
 800119c:	041a      	lsls	r2, r3, #16
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	611a      	str	r2, [r3, #16]
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr

080011ac <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	460b      	mov	r3, r1
 80011b6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011be:	887a      	ldrh	r2, [r7, #2]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4013      	ands	r3, r2
 80011c4:	041a      	lsls	r2, r3, #16
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	43d9      	mvns	r1, r3
 80011ca:	887b      	ldrh	r3, [r7, #2]
 80011cc:	400b      	ands	r3, r1
 80011ce:	431a      	orrs	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	611a      	str	r2, [r3, #16]
}
 80011d4:	bf00      	nop
 80011d6:	3714      	adds	r7, #20
 80011d8:	46bd      	mov	sp, r7
 80011da:	bc80      	pop	{r7}
 80011dc:	4770      	bx	lr
	...

080011e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d101      	bne.n	80011f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e26c      	b.n	80016cc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	f000 8087 	beq.w	800130e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001200:	4b92      	ldr	r3, [pc, #584]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f003 030c 	and.w	r3, r3, #12
 8001208:	2b04      	cmp	r3, #4
 800120a:	d00c      	beq.n	8001226 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800120c:	4b8f      	ldr	r3, [pc, #572]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 030c 	and.w	r3, r3, #12
 8001214:	2b08      	cmp	r3, #8
 8001216:	d112      	bne.n	800123e <HAL_RCC_OscConfig+0x5e>
 8001218:	4b8c      	ldr	r3, [pc, #560]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001224:	d10b      	bne.n	800123e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001226:	4b89      	ldr	r3, [pc, #548]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d06c      	beq.n	800130c <HAL_RCC_OscConfig+0x12c>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d168      	bne.n	800130c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e246      	b.n	80016cc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001246:	d106      	bne.n	8001256 <HAL_RCC_OscConfig+0x76>
 8001248:	4b80      	ldr	r3, [pc, #512]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a7f      	ldr	r2, [pc, #508]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 800124e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001252:	6013      	str	r3, [r2, #0]
 8001254:	e02e      	b.n	80012b4 <HAL_RCC_OscConfig+0xd4>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d10c      	bne.n	8001278 <HAL_RCC_OscConfig+0x98>
 800125e:	4b7b      	ldr	r3, [pc, #492]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a7a      	ldr	r2, [pc, #488]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 8001264:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001268:	6013      	str	r3, [r2, #0]
 800126a:	4b78      	ldr	r3, [pc, #480]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a77      	ldr	r2, [pc, #476]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 8001270:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	e01d      	b.n	80012b4 <HAL_RCC_OscConfig+0xd4>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001280:	d10c      	bne.n	800129c <HAL_RCC_OscConfig+0xbc>
 8001282:	4b72      	ldr	r3, [pc, #456]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a71      	ldr	r2, [pc, #452]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 8001288:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800128c:	6013      	str	r3, [r2, #0]
 800128e:	4b6f      	ldr	r3, [pc, #444]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a6e      	ldr	r2, [pc, #440]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 8001294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	e00b      	b.n	80012b4 <HAL_RCC_OscConfig+0xd4>
 800129c:	4b6b      	ldr	r3, [pc, #428]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a6a      	ldr	r2, [pc, #424]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 80012a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012a6:	6013      	str	r3, [r2, #0]
 80012a8:	4b68      	ldr	r3, [pc, #416]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a67      	ldr	r2, [pc, #412]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 80012ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d013      	beq.n	80012e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012bc:	f7ff fa24 	bl	8000708 <HAL_GetTick>
 80012c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c2:	e008      	b.n	80012d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012c4:	f7ff fa20 	bl	8000708 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b64      	cmp	r3, #100	; 0x64
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e1fa      	b.n	80016cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012d6:	4b5d      	ldr	r3, [pc, #372]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d0f0      	beq.n	80012c4 <HAL_RCC_OscConfig+0xe4>
 80012e2:	e014      	b.n	800130e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e4:	f7ff fa10 	bl	8000708 <HAL_GetTick>
 80012e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012ec:	f7ff fa0c 	bl	8000708 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b64      	cmp	r3, #100	; 0x64
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e1e6      	b.n	80016cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012fe:	4b53      	ldr	r3, [pc, #332]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1f0      	bne.n	80012ec <HAL_RCC_OscConfig+0x10c>
 800130a:	e000      	b.n	800130e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800130c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d063      	beq.n	80013e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800131a:	4b4c      	ldr	r3, [pc, #304]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f003 030c 	and.w	r3, r3, #12
 8001322:	2b00      	cmp	r3, #0
 8001324:	d00b      	beq.n	800133e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001326:	4b49      	ldr	r3, [pc, #292]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f003 030c 	and.w	r3, r3, #12
 800132e:	2b08      	cmp	r3, #8
 8001330:	d11c      	bne.n	800136c <HAL_RCC_OscConfig+0x18c>
 8001332:	4b46      	ldr	r3, [pc, #280]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d116      	bne.n	800136c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800133e:	4b43      	ldr	r3, [pc, #268]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	2b00      	cmp	r3, #0
 8001348:	d005      	beq.n	8001356 <HAL_RCC_OscConfig+0x176>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	691b      	ldr	r3, [r3, #16]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d001      	beq.n	8001356 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e1ba      	b.n	80016cc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001356:	4b3d      	ldr	r3, [pc, #244]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	695b      	ldr	r3, [r3, #20]
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	4939      	ldr	r1, [pc, #228]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 8001366:	4313      	orrs	r3, r2
 8001368:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800136a:	e03a      	b.n	80013e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	691b      	ldr	r3, [r3, #16]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d020      	beq.n	80013b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001374:	4b36      	ldr	r3, [pc, #216]	; (8001450 <HAL_RCC_OscConfig+0x270>)
 8001376:	2201      	movs	r2, #1
 8001378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137a:	f7ff f9c5 	bl	8000708 <HAL_GetTick>
 800137e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001380:	e008      	b.n	8001394 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001382:	f7ff f9c1 	bl	8000708 <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d901      	bls.n	8001394 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001390:	2303      	movs	r3, #3
 8001392:	e19b      	b.n	80016cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001394:	4b2d      	ldr	r3, [pc, #180]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0302 	and.w	r3, r3, #2
 800139c:	2b00      	cmp	r3, #0
 800139e:	d0f0      	beq.n	8001382 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a0:	4b2a      	ldr	r3, [pc, #168]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	695b      	ldr	r3, [r3, #20]
 80013ac:	00db      	lsls	r3, r3, #3
 80013ae:	4927      	ldr	r1, [pc, #156]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 80013b0:	4313      	orrs	r3, r2
 80013b2:	600b      	str	r3, [r1, #0]
 80013b4:	e015      	b.n	80013e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013b6:	4b26      	ldr	r3, [pc, #152]	; (8001450 <HAL_RCC_OscConfig+0x270>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013bc:	f7ff f9a4 	bl	8000708 <HAL_GetTick>
 80013c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013c2:	e008      	b.n	80013d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013c4:	f7ff f9a0 	bl	8000708 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e17a      	b.n	80016cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013d6:	4b1d      	ldr	r3, [pc, #116]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1f0      	bne.n	80013c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0308 	and.w	r3, r3, #8
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d03a      	beq.n	8001464 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d019      	beq.n	800142a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013f6:	4b17      	ldr	r3, [pc, #92]	; (8001454 <HAL_RCC_OscConfig+0x274>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013fc:	f7ff f984 	bl	8000708 <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001404:	f7ff f980 	bl	8000708 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b02      	cmp	r3, #2
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e15a      	b.n	80016cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001416:	4b0d      	ldr	r3, [pc, #52]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 8001418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d0f0      	beq.n	8001404 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001422:	2001      	movs	r0, #1
 8001424:	f000 fad8 	bl	80019d8 <RCC_Delay>
 8001428:	e01c      	b.n	8001464 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800142a:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <HAL_RCC_OscConfig+0x274>)
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001430:	f7ff f96a 	bl	8000708 <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001436:	e00f      	b.n	8001458 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001438:	f7ff f966 	bl	8000708 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b02      	cmp	r3, #2
 8001444:	d908      	bls.n	8001458 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e140      	b.n	80016cc <HAL_RCC_OscConfig+0x4ec>
 800144a:	bf00      	nop
 800144c:	40021000 	.word	0x40021000
 8001450:	42420000 	.word	0x42420000
 8001454:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001458:	4b9e      	ldr	r3, [pc, #632]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 800145a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145c:	f003 0302 	and.w	r3, r3, #2
 8001460:	2b00      	cmp	r3, #0
 8001462:	d1e9      	bne.n	8001438 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0304 	and.w	r3, r3, #4
 800146c:	2b00      	cmp	r3, #0
 800146e:	f000 80a6 	beq.w	80015be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001472:	2300      	movs	r3, #0
 8001474:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001476:	4b97      	ldr	r3, [pc, #604]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 8001478:	69db      	ldr	r3, [r3, #28]
 800147a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d10d      	bne.n	800149e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001482:	4b94      	ldr	r3, [pc, #592]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	4a93      	ldr	r2, [pc, #588]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 8001488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800148c:	61d3      	str	r3, [r2, #28]
 800148e:	4b91      	ldr	r3, [pc, #580]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 8001490:	69db      	ldr	r3, [r3, #28]
 8001492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001496:	60bb      	str	r3, [r7, #8]
 8001498:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800149a:	2301      	movs	r3, #1
 800149c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800149e:	4b8e      	ldr	r3, [pc, #568]	; (80016d8 <HAL_RCC_OscConfig+0x4f8>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d118      	bne.n	80014dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014aa:	4b8b      	ldr	r3, [pc, #556]	; (80016d8 <HAL_RCC_OscConfig+0x4f8>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a8a      	ldr	r2, [pc, #552]	; (80016d8 <HAL_RCC_OscConfig+0x4f8>)
 80014b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014b6:	f7ff f927 	bl	8000708 <HAL_GetTick>
 80014ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014bc:	e008      	b.n	80014d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014be:	f7ff f923 	bl	8000708 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b64      	cmp	r3, #100	; 0x64
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e0fd      	b.n	80016cc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d0:	4b81      	ldr	r3, [pc, #516]	; (80016d8 <HAL_RCC_OscConfig+0x4f8>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d0f0      	beq.n	80014be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d106      	bne.n	80014f2 <HAL_RCC_OscConfig+0x312>
 80014e4:	4b7b      	ldr	r3, [pc, #492]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 80014e6:	6a1b      	ldr	r3, [r3, #32]
 80014e8:	4a7a      	ldr	r2, [pc, #488]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 80014ea:	f043 0301 	orr.w	r3, r3, #1
 80014ee:	6213      	str	r3, [r2, #32]
 80014f0:	e02d      	b.n	800154e <HAL_RCC_OscConfig+0x36e>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d10c      	bne.n	8001514 <HAL_RCC_OscConfig+0x334>
 80014fa:	4b76      	ldr	r3, [pc, #472]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 80014fc:	6a1b      	ldr	r3, [r3, #32]
 80014fe:	4a75      	ldr	r2, [pc, #468]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 8001500:	f023 0301 	bic.w	r3, r3, #1
 8001504:	6213      	str	r3, [r2, #32]
 8001506:	4b73      	ldr	r3, [pc, #460]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 8001508:	6a1b      	ldr	r3, [r3, #32]
 800150a:	4a72      	ldr	r2, [pc, #456]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 800150c:	f023 0304 	bic.w	r3, r3, #4
 8001510:	6213      	str	r3, [r2, #32]
 8001512:	e01c      	b.n	800154e <HAL_RCC_OscConfig+0x36e>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	2b05      	cmp	r3, #5
 800151a:	d10c      	bne.n	8001536 <HAL_RCC_OscConfig+0x356>
 800151c:	4b6d      	ldr	r3, [pc, #436]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 800151e:	6a1b      	ldr	r3, [r3, #32]
 8001520:	4a6c      	ldr	r2, [pc, #432]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 8001522:	f043 0304 	orr.w	r3, r3, #4
 8001526:	6213      	str	r3, [r2, #32]
 8001528:	4b6a      	ldr	r3, [pc, #424]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	4a69      	ldr	r2, [pc, #420]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	6213      	str	r3, [r2, #32]
 8001534:	e00b      	b.n	800154e <HAL_RCC_OscConfig+0x36e>
 8001536:	4b67      	ldr	r3, [pc, #412]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 8001538:	6a1b      	ldr	r3, [r3, #32]
 800153a:	4a66      	ldr	r2, [pc, #408]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 800153c:	f023 0301 	bic.w	r3, r3, #1
 8001540:	6213      	str	r3, [r2, #32]
 8001542:	4b64      	ldr	r3, [pc, #400]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 8001544:	6a1b      	ldr	r3, [r3, #32]
 8001546:	4a63      	ldr	r2, [pc, #396]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 8001548:	f023 0304 	bic.w	r3, r3, #4
 800154c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d015      	beq.n	8001582 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001556:	f7ff f8d7 	bl	8000708 <HAL_GetTick>
 800155a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800155c:	e00a      	b.n	8001574 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800155e:	f7ff f8d3 	bl	8000708 <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	f241 3288 	movw	r2, #5000	; 0x1388
 800156c:	4293      	cmp	r3, r2
 800156e:	d901      	bls.n	8001574 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e0ab      	b.n	80016cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001574:	4b57      	ldr	r3, [pc, #348]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 8001576:	6a1b      	ldr	r3, [r3, #32]
 8001578:	f003 0302 	and.w	r3, r3, #2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d0ee      	beq.n	800155e <HAL_RCC_OscConfig+0x37e>
 8001580:	e014      	b.n	80015ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001582:	f7ff f8c1 	bl	8000708 <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001588:	e00a      	b.n	80015a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800158a:	f7ff f8bd 	bl	8000708 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	f241 3288 	movw	r2, #5000	; 0x1388
 8001598:	4293      	cmp	r3, r2
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e095      	b.n	80016cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015a0:	4b4c      	ldr	r3, [pc, #304]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 80015a2:	6a1b      	ldr	r3, [r3, #32]
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d1ee      	bne.n	800158a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80015ac:	7dfb      	ldrb	r3, [r7, #23]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d105      	bne.n	80015be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015b2:	4b48      	ldr	r3, [pc, #288]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 80015b4:	69db      	ldr	r3, [r3, #28]
 80015b6:	4a47      	ldr	r2, [pc, #284]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 80015b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	f000 8081 	beq.w	80016ca <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015c8:	4b42      	ldr	r3, [pc, #264]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 030c 	and.w	r3, r3, #12
 80015d0:	2b08      	cmp	r3, #8
 80015d2:	d061      	beq.n	8001698 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	69db      	ldr	r3, [r3, #28]
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d146      	bne.n	800166a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015dc:	4b3f      	ldr	r3, [pc, #252]	; (80016dc <HAL_RCC_OscConfig+0x4fc>)
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e2:	f7ff f891 	bl	8000708 <HAL_GetTick>
 80015e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015e8:	e008      	b.n	80015fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ea:	f7ff f88d 	bl	8000708 <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d901      	bls.n	80015fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e067      	b.n	80016cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015fc:	4b35      	ldr	r3, [pc, #212]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1f0      	bne.n	80015ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a1b      	ldr	r3, [r3, #32]
 800160c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001610:	d108      	bne.n	8001624 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001612:	4b30      	ldr	r3, [pc, #192]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	492d      	ldr	r1, [pc, #180]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 8001620:	4313      	orrs	r3, r2
 8001622:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001624:	4b2b      	ldr	r3, [pc, #172]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a19      	ldr	r1, [r3, #32]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001634:	430b      	orrs	r3, r1
 8001636:	4927      	ldr	r1, [pc, #156]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 8001638:	4313      	orrs	r3, r2
 800163a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800163c:	4b27      	ldr	r3, [pc, #156]	; (80016dc <HAL_RCC_OscConfig+0x4fc>)
 800163e:	2201      	movs	r2, #1
 8001640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001642:	f7ff f861 	bl	8000708 <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001648:	e008      	b.n	800165c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800164a:	f7ff f85d 	bl	8000708 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e037      	b.n	80016cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800165c:	4b1d      	ldr	r3, [pc, #116]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d0f0      	beq.n	800164a <HAL_RCC_OscConfig+0x46a>
 8001668:	e02f      	b.n	80016ca <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800166a:	4b1c      	ldr	r3, [pc, #112]	; (80016dc <HAL_RCC_OscConfig+0x4fc>)
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001670:	f7ff f84a 	bl	8000708 <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001678:	f7ff f846 	bl	8000708 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e020      	b.n	80016cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800168a:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1f0      	bne.n	8001678 <HAL_RCC_OscConfig+0x498>
 8001696:	e018      	b.n	80016ca <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	69db      	ldr	r3, [r3, #28]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d101      	bne.n	80016a4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e013      	b.n	80016cc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016a4:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a1b      	ldr	r3, [r3, #32]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d106      	bne.n	80016c6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d001      	beq.n	80016ca <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e000      	b.n	80016cc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80016ca:	2300      	movs	r3, #0
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40021000 	.word	0x40021000
 80016d8:	40007000 	.word	0x40007000
 80016dc:	42420060 	.word	0x42420060

080016e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d101      	bne.n	80016f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e0d0      	b.n	8001896 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016f4:	4b6a      	ldr	r3, [pc, #424]	; (80018a0 <HAL_RCC_ClockConfig+0x1c0>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0307 	and.w	r3, r3, #7
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d910      	bls.n	8001724 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001702:	4b67      	ldr	r3, [pc, #412]	; (80018a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f023 0207 	bic.w	r2, r3, #7
 800170a:	4965      	ldr	r1, [pc, #404]	; (80018a0 <HAL_RCC_ClockConfig+0x1c0>)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	4313      	orrs	r3, r2
 8001710:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001712:	4b63      	ldr	r3, [pc, #396]	; (80018a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0307 	and.w	r3, r3, #7
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	429a      	cmp	r2, r3
 800171e:	d001      	beq.n	8001724 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e0b8      	b.n	8001896 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d020      	beq.n	8001772 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0304 	and.w	r3, r3, #4
 8001738:	2b00      	cmp	r3, #0
 800173a:	d005      	beq.n	8001748 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800173c:	4b59      	ldr	r3, [pc, #356]	; (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	4a58      	ldr	r2, [pc, #352]	; (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001742:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001746:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0308 	and.w	r3, r3, #8
 8001750:	2b00      	cmp	r3, #0
 8001752:	d005      	beq.n	8001760 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001754:	4b53      	ldr	r3, [pc, #332]	; (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	4a52      	ldr	r2, [pc, #328]	; (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 800175a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800175e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001760:	4b50      	ldr	r3, [pc, #320]	; (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	494d      	ldr	r1, [pc, #308]	; (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 800176e:	4313      	orrs	r3, r2
 8001770:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	2b00      	cmp	r3, #0
 800177c:	d040      	beq.n	8001800 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d107      	bne.n	8001796 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001786:	4b47      	ldr	r3, [pc, #284]	; (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d115      	bne.n	80017be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e07f      	b.n	8001896 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2b02      	cmp	r3, #2
 800179c:	d107      	bne.n	80017ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800179e:	4b41      	ldr	r3, [pc, #260]	; (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d109      	bne.n	80017be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e073      	b.n	8001896 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ae:	4b3d      	ldr	r3, [pc, #244]	; (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d101      	bne.n	80017be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e06b      	b.n	8001896 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017be:	4b39      	ldr	r3, [pc, #228]	; (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f023 0203 	bic.w	r2, r3, #3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	4936      	ldr	r1, [pc, #216]	; (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 80017cc:	4313      	orrs	r3, r2
 80017ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017d0:	f7fe ff9a 	bl	8000708 <HAL_GetTick>
 80017d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017d6:	e00a      	b.n	80017ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017d8:	f7fe ff96 	bl	8000708 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e053      	b.n	8001896 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ee:	4b2d      	ldr	r3, [pc, #180]	; (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f003 020c 	and.w	r2, r3, #12
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d1eb      	bne.n	80017d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001800:	4b27      	ldr	r3, [pc, #156]	; (80018a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0307 	and.w	r3, r3, #7
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	429a      	cmp	r2, r3
 800180c:	d210      	bcs.n	8001830 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800180e:	4b24      	ldr	r3, [pc, #144]	; (80018a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f023 0207 	bic.w	r2, r3, #7
 8001816:	4922      	ldr	r1, [pc, #136]	; (80018a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	4313      	orrs	r3, r2
 800181c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800181e:	4b20      	ldr	r3, [pc, #128]	; (80018a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	429a      	cmp	r2, r3
 800182a:	d001      	beq.n	8001830 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e032      	b.n	8001896 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0304 	and.w	r3, r3, #4
 8001838:	2b00      	cmp	r3, #0
 800183a:	d008      	beq.n	800184e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800183c:	4b19      	ldr	r3, [pc, #100]	; (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	4916      	ldr	r1, [pc, #88]	; (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 800184a:	4313      	orrs	r3, r2
 800184c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0308 	and.w	r3, r3, #8
 8001856:	2b00      	cmp	r3, #0
 8001858:	d009      	beq.n	800186e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800185a:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	691b      	ldr	r3, [r3, #16]
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	490e      	ldr	r1, [pc, #56]	; (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 800186a:	4313      	orrs	r3, r2
 800186c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800186e:	f000 f821 	bl	80018b4 <HAL_RCC_GetSysClockFreq>
 8001872:	4602      	mov	r2, r0
 8001874:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	091b      	lsrs	r3, r3, #4
 800187a:	f003 030f 	and.w	r3, r3, #15
 800187e:	490a      	ldr	r1, [pc, #40]	; (80018a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001880:	5ccb      	ldrb	r3, [r1, r3]
 8001882:	fa22 f303 	lsr.w	r3, r2, r3
 8001886:	4a09      	ldr	r2, [pc, #36]	; (80018ac <HAL_RCC_ClockConfig+0x1cc>)
 8001888:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800188a:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <HAL_RCC_ClockConfig+0x1d0>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f7fe fef8 	bl	8000684 <HAL_InitTick>

  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40022000 	.word	0x40022000
 80018a4:	40021000 	.word	0x40021000
 80018a8:	08002688 	.word	0x08002688
 80018ac:	20000000 	.word	0x20000000
 80018b0:	20000004 	.word	0x20000004

080018b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018b4:	b490      	push	{r4, r7}
 80018b6:	b08a      	sub	sp, #40	; 0x28
 80018b8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80018ba:	4b2a      	ldr	r3, [pc, #168]	; (8001964 <HAL_RCC_GetSysClockFreq+0xb0>)
 80018bc:	1d3c      	adds	r4, r7, #4
 80018be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80018c4:	f240 2301 	movw	r3, #513	; 0x201
 80018c8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61fb      	str	r3, [r7, #28]
 80018ce:	2300      	movs	r3, #0
 80018d0:	61bb      	str	r3, [r7, #24]
 80018d2:	2300      	movs	r3, #0
 80018d4:	627b      	str	r3, [r7, #36]	; 0x24
 80018d6:	2300      	movs	r3, #0
 80018d8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80018da:	2300      	movs	r3, #0
 80018dc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80018de:	4b22      	ldr	r3, [pc, #136]	; (8001968 <HAL_RCC_GetSysClockFreq+0xb4>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	f003 030c 	and.w	r3, r3, #12
 80018ea:	2b04      	cmp	r3, #4
 80018ec:	d002      	beq.n	80018f4 <HAL_RCC_GetSysClockFreq+0x40>
 80018ee:	2b08      	cmp	r3, #8
 80018f0:	d003      	beq.n	80018fa <HAL_RCC_GetSysClockFreq+0x46>
 80018f2:	e02d      	b.n	8001950 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018f4:	4b1d      	ldr	r3, [pc, #116]	; (800196c <HAL_RCC_GetSysClockFreq+0xb8>)
 80018f6:	623b      	str	r3, [r7, #32]
      break;
 80018f8:	e02d      	b.n	8001956 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	0c9b      	lsrs	r3, r3, #18
 80018fe:	f003 030f 	and.w	r3, r3, #15
 8001902:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001906:	4413      	add	r3, r2
 8001908:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800190c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d013      	beq.n	8001940 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001918:	4b13      	ldr	r3, [pc, #76]	; (8001968 <HAL_RCC_GetSysClockFreq+0xb4>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	0c5b      	lsrs	r3, r3, #17
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001926:	4413      	add	r3, r2
 8001928:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800192c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	4a0e      	ldr	r2, [pc, #56]	; (800196c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001932:	fb02 f203 	mul.w	r2, r2, r3
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	fbb2 f3f3 	udiv	r3, r2, r3
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
 800193e:	e004      	b.n	800194a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	4a0b      	ldr	r2, [pc, #44]	; (8001970 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001944:	fb02 f303 	mul.w	r3, r2, r3
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194c:	623b      	str	r3, [r7, #32]
      break;
 800194e:	e002      	b.n	8001956 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001950:	4b06      	ldr	r3, [pc, #24]	; (800196c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001952:	623b      	str	r3, [r7, #32]
      break;
 8001954:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001956:	6a3b      	ldr	r3, [r7, #32]
}
 8001958:	4618      	mov	r0, r3
 800195a:	3728      	adds	r7, #40	; 0x28
 800195c:	46bd      	mov	sp, r7
 800195e:	bc90      	pop	{r4, r7}
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	08002678 	.word	0x08002678
 8001968:	40021000 	.word	0x40021000
 800196c:	007a1200 	.word	0x007a1200
 8001970:	003d0900 	.word	0x003d0900

08001974 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001978:	4b02      	ldr	r3, [pc, #8]	; (8001984 <HAL_RCC_GetHCLKFreq+0x10>)
 800197a:	681b      	ldr	r3, [r3, #0]
}
 800197c:	4618      	mov	r0, r3
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr
 8001984:	20000000 	.word	0x20000000

08001988 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800198c:	f7ff fff2 	bl	8001974 <HAL_RCC_GetHCLKFreq>
 8001990:	4602      	mov	r2, r0
 8001992:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	0a1b      	lsrs	r3, r3, #8
 8001998:	f003 0307 	and.w	r3, r3, #7
 800199c:	4903      	ldr	r1, [pc, #12]	; (80019ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800199e:	5ccb      	ldrb	r3, [r1, r3]
 80019a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40021000 	.word	0x40021000
 80019ac:	08002698 	.word	0x08002698

080019b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019b4:	f7ff ffde 	bl	8001974 <HAL_RCC_GetHCLKFreq>
 80019b8:	4602      	mov	r2, r0
 80019ba:	4b05      	ldr	r3, [pc, #20]	; (80019d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	0adb      	lsrs	r3, r3, #11
 80019c0:	f003 0307 	and.w	r3, r3, #7
 80019c4:	4903      	ldr	r1, [pc, #12]	; (80019d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019c6:	5ccb      	ldrb	r3, [r1, r3]
 80019c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40021000 	.word	0x40021000
 80019d4:	08002698 	.word	0x08002698

080019d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019e0:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <RCC_Delay+0x34>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a0a      	ldr	r2, [pc, #40]	; (8001a10 <RCC_Delay+0x38>)
 80019e6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ea:	0a5b      	lsrs	r3, r3, #9
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	fb02 f303 	mul.w	r3, r2, r3
 80019f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019f4:	bf00      	nop
  }
  while (Delay --);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	1e5a      	subs	r2, r3, #1
 80019fa:	60fa      	str	r2, [r7, #12]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d1f9      	bne.n	80019f4 <RCC_Delay+0x1c>
}
 8001a00:	bf00      	nop
 8001a02:	bf00      	nop
 8001a04:	3714      	adds	r7, #20
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc80      	pop	{r7}
 8001a0a:	4770      	bx	lr
 8001a0c:	20000000 	.word	0x20000000
 8001a10:	10624dd3 	.word	0x10624dd3

08001a14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e03f      	b.n	8001aa6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d106      	bne.n	8001a40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7fe fcf0 	bl	8000420 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2224      	movs	r2, #36	; 0x24
 8001a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	68da      	ldr	r2, [r3, #12]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f000 fd47 	bl	80024ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	691a      	ldr	r2, [r3, #16]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	695a      	ldr	r2, [r3, #20]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	68da      	ldr	r2, [r3, #12]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2220      	movs	r2, #32
 8001a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2220      	movs	r2, #32
 8001aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
	...

08001ab0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	4613      	mov	r3, r2
 8001abc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b20      	cmp	r3, #32
 8001ac8:	d153      	bne.n	8001b72 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d002      	beq.n	8001ad6 <HAL_UART_Transmit_DMA+0x26>
 8001ad0:	88fb      	ldrh	r3, [r7, #6]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e04c      	b.n	8001b74 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d101      	bne.n	8001ae8 <HAL_UART_Transmit_DMA+0x38>
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	e045      	b.n	8001b74 <HAL_UART_Transmit_DMA+0xc4>
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8001af0:	68ba      	ldr	r2, [r7, #8]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	88fa      	ldrh	r2, [r7, #6]
 8001afa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	88fa      	ldrh	r2, [r7, #6]
 8001b00:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2200      	movs	r2, #0
 8001b06:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2221      	movs	r2, #33	; 0x21
 8001b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b14:	4a19      	ldr	r2, [pc, #100]	; (8001b7c <HAL_UART_Transmit_DMA+0xcc>)
 8001b16:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b1c:	4a18      	ldr	r2, [pc, #96]	; (8001b80 <HAL_UART_Transmit_DMA+0xd0>)
 8001b1e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b24:	4a17      	ldr	r2, [pc, #92]	; (8001b84 <HAL_UART_Transmit_DMA+0xd4>)
 8001b26:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8001b30:	f107 0308 	add.w	r3, r7, #8
 8001b34:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	6819      	ldr	r1, [r3, #0]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	3304      	adds	r3, #4
 8001b44:	461a      	mov	r2, r3
 8001b46:	88fb      	ldrh	r3, [r7, #6]
 8001b48:	f7fe ff50 	bl	80009ec <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001b54:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	695a      	ldr	r2, [r3, #20]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b6c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	e000      	b.n	8001b74 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8001b72:	2302      	movs	r3, #2
  }
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3718      	adds	r7, #24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	08001f89 	.word	0x08001f89
 8001b80:	08001fdb 	.word	0x08001fdb
 8001b84:	080020c3 	.word	0x080020c3

08001b88 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	4613      	mov	r3, r2
 8001b94:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b20      	cmp	r3, #32
 8001ba0:	d11d      	bne.n	8001bde <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d002      	beq.n	8001bae <HAL_UART_Receive_DMA+0x26>
 8001ba8:	88fb      	ldrh	r3, [r7, #6]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e016      	b.n	8001be0 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d101      	bne.n	8001bc0 <HAL_UART_Receive_DMA+0x38>
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	e00f      	b.n	8001be0 <HAL_UART_Receive_DMA+0x58>
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8001bce:	88fb      	ldrh	r3, [r7, #6]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	68b9      	ldr	r1, [r7, #8]
 8001bd4:	68f8      	ldr	r0, [r7, #12]
 8001bd6:	f000 fabf 	bl	8002158 <UART_Start_Receive_DMA>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	e000      	b.n	8001be0 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001bde:	2302      	movs	r3, #2
  }
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08a      	sub	sp, #40	; 0x28
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	695b      	ldr	r3, [r3, #20]
 8001c06:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c12:	f003 030f 	and.w	r3, r3, #15
 8001c16:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d10d      	bne.n	8001c3a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	f003 0320 	and.w	r3, r3, #32
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d008      	beq.n	8001c3a <HAL_UART_IRQHandler+0x52>
 8001c28:	6a3b      	ldr	r3, [r7, #32]
 8001c2a:	f003 0320 	and.w	r3, r3, #32
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 fbb0 	bl	8002398 <UART_Receive_IT>
      return;
 8001c38:	e17b      	b.n	8001f32 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f000 80b1 	beq.w	8001da4 <HAL_UART_IRQHandler+0x1bc>
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d105      	bne.n	8001c58 <HAL_UART_IRQHandler+0x70>
 8001c4c:	6a3b      	ldr	r3, [r7, #32]
 8001c4e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f000 80a6 	beq.w	8001da4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d00a      	beq.n	8001c78 <HAL_UART_IRQHandler+0x90>
 8001c62:	6a3b      	ldr	r3, [r7, #32]
 8001c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d005      	beq.n	8001c78 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c70:	f043 0201 	orr.w	r2, r3, #1
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7a:	f003 0304 	and.w	r3, r3, #4
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d00a      	beq.n	8001c98 <HAL_UART_IRQHandler+0xb0>
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d005      	beq.n	8001c98 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c90:	f043 0202 	orr.w	r2, r3, #2
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d00a      	beq.n	8001cb8 <HAL_UART_IRQHandler+0xd0>
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d005      	beq.n	8001cb8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb0:	f043 0204 	orr.w	r2, r3, #4
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cba:	f003 0308 	and.w	r3, r3, #8
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d00f      	beq.n	8001ce2 <HAL_UART_IRQHandler+0xfa>
 8001cc2:	6a3b      	ldr	r3, [r7, #32]
 8001cc4:	f003 0320 	and.w	r3, r3, #32
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d104      	bne.n	8001cd6 <HAL_UART_IRQHandler+0xee>
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d005      	beq.n	8001ce2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	f043 0208 	orr.w	r2, r3, #8
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f000 811e 	beq.w	8001f28 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	f003 0320 	and.w	r3, r3, #32
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d007      	beq.n	8001d06 <HAL_UART_IRQHandler+0x11e>
 8001cf6:	6a3b      	ldr	r3, [r7, #32]
 8001cf8:	f003 0320 	and.w	r3, r3, #32
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d002      	beq.n	8001d06 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 fb49 	bl	8002398 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	695b      	ldr	r3, [r3, #20]
 8001d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	bf14      	ite	ne
 8001d14:	2301      	movne	r3, #1
 8001d16:	2300      	moveq	r3, #0
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d20:	f003 0308 	and.w	r3, r3, #8
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d102      	bne.n	8001d2e <HAL_UART_IRQHandler+0x146>
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d031      	beq.n	8001d92 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 fa8b 	bl	800224a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d023      	beq.n	8001d8a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	695a      	ldr	r2, [r3, #20]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d50:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d013      	beq.n	8001d82 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d5e:	4a76      	ldr	r2, [pc, #472]	; (8001f38 <HAL_UART_IRQHandler+0x350>)
 8001d60:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe feda 	bl	8000b20 <HAL_DMA_Abort_IT>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d016      	beq.n	8001da0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d7c:	4610      	mov	r0, r2
 8001d7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d80:	e00e      	b.n	8001da0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f8ec 	bl	8001f60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d88:	e00a      	b.n	8001da0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f8e8 	bl	8001f60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d90:	e006      	b.n	8001da0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 f8e4 	bl	8001f60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001d9e:	e0c3      	b.n	8001f28 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001da0:	bf00      	nop
    return;
 8001da2:	e0c1      	b.n	8001f28 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	f040 80a1 	bne.w	8001ef0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8001dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db0:	f003 0310 	and.w	r3, r3, #16
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f000 809b 	beq.w	8001ef0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8001dba:	6a3b      	ldr	r3, [r7, #32]
 8001dbc:	f003 0310 	and.w	r3, r3, #16
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f000 8095 	beq.w	8001ef0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d04e      	beq.n	8001e88 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8001df4:	8a3b      	ldrh	r3, [r7, #16]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f000 8098 	beq.w	8001f2c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001e00:	8a3a      	ldrh	r2, [r7, #16]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	f080 8092 	bcs.w	8001f2c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	8a3a      	ldrh	r2, [r7, #16]
 8001e0c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	2b20      	cmp	r3, #32
 8001e16:	d02b      	beq.n	8001e70 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	68da      	ldr	r2, [r3, #12]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e26:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	695a      	ldr	r2, [r3, #20]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f022 0201 	bic.w	r2, r2, #1
 8001e36:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	695a      	ldr	r2, [r3, #20]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e46:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2220      	movs	r2, #32
 8001e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68da      	ldr	r2, [r3, #12]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 0210 	bic.w	r2, r2, #16
 8001e64:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe fe1d 	bl	8000aaa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	4619      	mov	r1, r3
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f000 f876 	bl	8001f72 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001e86:	e051      	b.n	8001f2c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d047      	beq.n	8001f30 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8001ea0:	8a7b      	ldrh	r3, [r7, #18]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d044      	beq.n	8001f30 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68da      	ldr	r2, [r3, #12]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001eb4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	695a      	ldr	r2, [r3, #20]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f022 0201 	bic.w	r2, r2, #1
 8001ec4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2220      	movs	r2, #32
 8001eca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	68da      	ldr	r2, [r3, #12]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 0210 	bic.w	r2, r2, #16
 8001ee2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001ee4:	8a7b      	ldrh	r3, [r7, #18]
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 f842 	bl	8001f72 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001eee:	e01f      	b.n	8001f30 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d008      	beq.n	8001f0c <HAL_UART_IRQHandler+0x324>
 8001efa:	6a3b      	ldr	r3, [r7, #32]
 8001efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d003      	beq.n	8001f0c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 f9e0 	bl	80022ca <UART_Transmit_IT>
    return;
 8001f0a:	e012      	b.n	8001f32 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d00d      	beq.n	8001f32 <HAL_UART_IRQHandler+0x34a>
 8001f16:	6a3b      	ldr	r3, [r7, #32]
 8001f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d008      	beq.n	8001f32 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 fa21 	bl	8002368 <UART_EndTransmit_IT>
    return;
 8001f26:	e004      	b.n	8001f32 <HAL_UART_IRQHandler+0x34a>
    return;
 8001f28:	bf00      	nop
 8001f2a:	e002      	b.n	8001f32 <HAL_UART_IRQHandler+0x34a>
      return;
 8001f2c:	bf00      	nop
 8001f2e:	e000      	b.n	8001f32 <HAL_UART_IRQHandler+0x34a>
      return;
 8001f30:	bf00      	nop
  }
}
 8001f32:	3728      	adds	r7, #40	; 0x28
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	080022a3 	.word	0x080022a3

08001f3c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bc80      	pop	{r7}
 8001f4c:	4770      	bx	lr

08001f4e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bc80      	pop	{r7}
 8001f5e:	4770      	bx	lr

08001f60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bc80      	pop	{r7}
 8001f70:	4770      	bx	lr

08001f72 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001f72:	b480      	push	{r7}
 8001f74:	b083      	sub	sp, #12
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bc80      	pop	{r7}
 8001f86:	4770      	bx	lr

08001f88 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f94:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0320 	and.w	r3, r3, #32
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d113      	bne.n	8001fcc <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	695a      	ldr	r2, [r3, #20]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fb8:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68da      	ldr	r2, [r3, #12]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fc8:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8001fca:	e002      	b.n	8001fd2 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8001fcc:	68f8      	ldr	r0, [r7, #12]
 8001fce:	f7fe f9e7 	bl	80003a0 <HAL_UART_TxCpltCallback>
}
 8001fd2:	bf00      	nop
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b084      	sub	sp, #16
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8001fe8:	68f8      	ldr	r0, [r7, #12]
 8001fea:	f7ff ffa7 	bl	8001f3c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001fee:	bf00      	nop
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b084      	sub	sp, #16
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002002:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0320 	and.w	r3, r3, #32
 800200e:	2b00      	cmp	r3, #0
 8002010:	d12a      	bne.n	8002068 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2200      	movs	r2, #0
 8002016:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68da      	ldr	r2, [r3, #12]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002026:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	695a      	ldr	r2, [r3, #20]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 0201 	bic.w	r2, r2, #1
 8002036:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	695a      	ldr	r2, [r3, #20]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002046:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2220      	movs	r2, #32
 800204c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002054:	2b01      	cmp	r3, #1
 8002056:	d107      	bne.n	8002068 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68da      	ldr	r2, [r3, #12]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 0210 	bic.w	r2, r2, #16
 8002066:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206c:	2b01      	cmp	r3, #1
 800206e:	d106      	bne.n	800207e <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002074:	4619      	mov	r1, r3
 8002076:	68f8      	ldr	r0, [r7, #12]
 8002078:	f7ff ff7b 	bl	8001f72 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800207c:	e002      	b.n	8002084 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800207e:	68f8      	ldr	r0, [r7, #12]
 8002080:	f7fe f970 	bl	8000364 <HAL_UART_RxCpltCallback>
}
 8002084:	bf00      	nop
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002098:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d108      	bne.n	80020b4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80020a6:	085b      	lsrs	r3, r3, #1
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	4619      	mov	r1, r3
 80020ac:	68f8      	ldr	r0, [r7, #12]
 80020ae:	f7ff ff60 	bl	8001f72 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80020b2:	e002      	b.n	80020ba <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80020b4:	68f8      	ldr	r0, [r7, #12]
 80020b6:	f7ff ff4a 	bl	8001f4e <HAL_UART_RxHalfCpltCallback>
}
 80020ba:	bf00      	nop
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b084      	sub	sp, #16
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80020ca:	2300      	movs	r3, #0
 80020cc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020de:	2b00      	cmp	r3, #0
 80020e0:	bf14      	ite	ne
 80020e2:	2301      	movne	r3, #1
 80020e4:	2300      	moveq	r3, #0
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b21      	cmp	r3, #33	; 0x21
 80020f4:	d108      	bne.n	8002108 <UART_DMAError+0x46>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d005      	beq.n	8002108 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	2200      	movs	r2, #0
 8002100:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002102:	68b8      	ldr	r0, [r7, #8]
 8002104:	f000 f88c 	bl	8002220 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002112:	2b00      	cmp	r3, #0
 8002114:	bf14      	ite	ne
 8002116:	2301      	movne	r3, #1
 8002118:	2300      	moveq	r3, #0
 800211a:	b2db      	uxtb	r3, r3
 800211c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b22      	cmp	r3, #34	; 0x22
 8002128:	d108      	bne.n	800213c <UART_DMAError+0x7a>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d005      	beq.n	800213c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	2200      	movs	r2, #0
 8002134:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002136:	68b8      	ldr	r0, [r7, #8]
 8002138:	f000 f887 	bl	800224a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002140:	f043 0210 	orr.w	r2, r3, #16
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002148:	68b8      	ldr	r0, [r7, #8]
 800214a:	f7ff ff09 	bl	8001f60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800214e:	bf00      	nop
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
	...

08002158 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	4613      	mov	r3, r2
 8002164:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002166:	68ba      	ldr	r2, [r7, #8]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	88fa      	ldrh	r2, [r7, #6]
 8002170:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2200      	movs	r2, #0
 8002176:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2222      	movs	r2, #34	; 0x22
 800217c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002184:	4a23      	ldr	r2, [pc, #140]	; (8002214 <UART_Start_Receive_DMA+0xbc>)
 8002186:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800218c:	4a22      	ldr	r2, [pc, #136]	; (8002218 <UART_Start_Receive_DMA+0xc0>)
 800218e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002194:	4a21      	ldr	r2, [pc, #132]	; (800221c <UART_Start_Receive_DMA+0xc4>)
 8002196:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800219c:	2200      	movs	r2, #0
 800219e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80021a0:	f107 0308 	add.w	r3, r7, #8
 80021a4:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	3304      	adds	r3, #4
 80021b0:	4619      	mov	r1, r3
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	88fb      	ldrh	r3, [r7, #6]
 80021b8:	f7fe fc18 	bl	80009ec <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80021bc:	2300      	movs	r3, #0
 80021be:	613b      	str	r3, [r7, #16]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	613b      	str	r3, [r7, #16]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	613b      	str	r3, [r7, #16]
 80021d0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68da      	ldr	r2, [r3, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021e8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	695a      	ldr	r2, [r3, #20]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f042 0201 	orr.w	r2, r2, #1
 80021f8:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	695a      	ldr	r2, [r3, #20]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002208:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800220a:	2300      	movs	r3, #0
}
 800220c:	4618      	mov	r0, r3
 800220e:	3718      	adds	r7, #24
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	08001ff7 	.word	0x08001ff7
 8002218:	0800208d 	.word	0x0800208d
 800221c:	080020c3 	.word	0x080020c3

08002220 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68da      	ldr	r2, [r3, #12]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002236:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2220      	movs	r2, #32
 800223c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	bc80      	pop	{r7}
 8002248:	4770      	bx	lr

0800224a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800224a:	b480      	push	{r7}
 800224c:	b083      	sub	sp, #12
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68da      	ldr	r2, [r3, #12]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002260:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	695a      	ldr	r2, [r3, #20]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 0201 	bic.w	r2, r2, #1
 8002270:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	2b01      	cmp	r3, #1
 8002278:	d107      	bne.n	800228a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68da      	ldr	r2, [r3, #12]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 0210 	bic.w	r2, r2, #16
 8002288:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2220      	movs	r2, #32
 800228e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	bc80      	pop	{r7}
 80022a0:	4770      	bx	lr

080022a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b084      	sub	sp, #16
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2200      	movs	r2, #0
 80022b4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80022bc:	68f8      	ldr	r0, [r7, #12]
 80022be:	f7ff fe4f 	bl	8001f60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80022c2:	bf00      	nop
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80022ca:	b480      	push	{r7}
 80022cc:	b085      	sub	sp, #20
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b21      	cmp	r3, #33	; 0x21
 80022dc:	d13e      	bne.n	800235c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022e6:	d114      	bne.n	8002312 <UART_Transmit_IT+0x48>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d110      	bne.n	8002312 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	881b      	ldrh	r3, [r3, #0]
 80022fa:	461a      	mov	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002304:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a1b      	ldr	r3, [r3, #32]
 800230a:	1c9a      	adds	r2, r3, #2
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	621a      	str	r2, [r3, #32]
 8002310:	e008      	b.n	8002324 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a1b      	ldr	r3, [r3, #32]
 8002316:	1c59      	adds	r1, r3, #1
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	6211      	str	r1, [r2, #32]
 800231c:	781a      	ldrb	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002328:	b29b      	uxth	r3, r3
 800232a:	3b01      	subs	r3, #1
 800232c:	b29b      	uxth	r3, r3
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	4619      	mov	r1, r3
 8002332:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002334:	2b00      	cmp	r3, #0
 8002336:	d10f      	bne.n	8002358 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002346:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68da      	ldr	r2, [r3, #12]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002356:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002358:	2300      	movs	r3, #0
 800235a:	e000      	b.n	800235e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800235c:	2302      	movs	r3, #2
  }
}
 800235e:	4618      	mov	r0, r3
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	bc80      	pop	{r7}
 8002366:	4770      	bx	lr

08002368 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68da      	ldr	r2, [r3, #12]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800237e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2220      	movs	r2, #32
 8002384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f7fe f809 	bl	80003a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2b22      	cmp	r3, #34	; 0x22
 80023aa:	f040 8099 	bne.w	80024e0 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023b6:	d117      	bne.n	80023e8 <UART_Receive_IT+0x50>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d113      	bne.n	80023e8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80023c0:	2300      	movs	r3, #0
 80023c2:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c8:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e0:	1c9a      	adds	r2, r3, #2
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	629a      	str	r2, [r3, #40]	; 0x28
 80023e6:	e026      	b.n	8002436 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ec:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80023ee:	2300      	movs	r3, #0
 80023f0:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023fa:	d007      	beq.n	800240c <UART_Receive_IT+0x74>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d10a      	bne.n	800241a <UART_Receive_IT+0x82>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d106      	bne.n	800241a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	b2da      	uxtb	r2, r3
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	701a      	strb	r2, [r3, #0]
 8002418:	e008      	b.n	800242c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	b2db      	uxtb	r3, r3
 8002422:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002426:	b2da      	uxtb	r2, r3
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002430:	1c5a      	adds	r2, r3, #1
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800243a:	b29b      	uxth	r3, r3
 800243c:	3b01      	subs	r3, #1
 800243e:	b29b      	uxth	r3, r3
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	4619      	mov	r1, r3
 8002444:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002446:	2b00      	cmp	r3, #0
 8002448:	d148      	bne.n	80024dc <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68da      	ldr	r2, [r3, #12]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f022 0220 	bic.w	r2, r2, #32
 8002458:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68da      	ldr	r2, [r3, #12]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002468:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	695a      	ldr	r2, [r3, #20]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 0201 	bic.w	r2, r2, #1
 8002478:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2220      	movs	r2, #32
 800247e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	2b01      	cmp	r3, #1
 8002488:	d123      	bne.n	80024d2 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68da      	ldr	r2, [r3, #12]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0210 	bic.w	r2, r2, #16
 800249e:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0310 	and.w	r3, r3, #16
 80024aa:	2b10      	cmp	r3, #16
 80024ac:	d10a      	bne.n	80024c4 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80024ae:	2300      	movs	r3, #0
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	60fb      	str	r3, [r7, #12]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80024c8:	4619      	mov	r1, r3
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7ff fd51 	bl	8001f72 <HAL_UARTEx_RxEventCallback>
 80024d0:	e002      	b.n	80024d8 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7fd ff46 	bl	8000364 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80024d8:	2300      	movs	r3, #0
 80024da:	e002      	b.n	80024e2 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80024dc:	2300      	movs	r3, #0
 80024de:	e000      	b.n	80024e2 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80024e0:	2302      	movs	r3, #2
  }
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3718      	adds	r7, #24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
	...

080024ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68da      	ldr	r2, [r3, #12]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	430a      	orrs	r2, r1
 8002508:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689a      	ldr	r2, [r3, #8]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	431a      	orrs	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	4313      	orrs	r3, r2
 800251a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002526:	f023 030c 	bic.w	r3, r3, #12
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	6812      	ldr	r2, [r2, #0]
 800252e:	68b9      	ldr	r1, [r7, #8]
 8002530:	430b      	orrs	r3, r1
 8002532:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	699a      	ldr	r2, [r3, #24]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	430a      	orrs	r2, r1
 8002548:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a2c      	ldr	r2, [pc, #176]	; (8002600 <UART_SetConfig+0x114>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d103      	bne.n	800255c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002554:	f7ff fa2c 	bl	80019b0 <HAL_RCC_GetPCLK2Freq>
 8002558:	60f8      	str	r0, [r7, #12]
 800255a:	e002      	b.n	8002562 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800255c:	f7ff fa14 	bl	8001988 <HAL_RCC_GetPCLK1Freq>
 8002560:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	4613      	mov	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	4413      	add	r3, r2
 800256a:	009a      	lsls	r2, r3, #2
 800256c:	441a      	add	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	fbb2 f3f3 	udiv	r3, r2, r3
 8002578:	4a22      	ldr	r2, [pc, #136]	; (8002604 <UART_SetConfig+0x118>)
 800257a:	fba2 2303 	umull	r2, r3, r2, r3
 800257e:	095b      	lsrs	r3, r3, #5
 8002580:	0119      	lsls	r1, r3, #4
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	4613      	mov	r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	4413      	add	r3, r2
 800258a:	009a      	lsls	r2, r3, #2
 800258c:	441a      	add	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	fbb2 f2f3 	udiv	r2, r2, r3
 8002598:	4b1a      	ldr	r3, [pc, #104]	; (8002604 <UART_SetConfig+0x118>)
 800259a:	fba3 0302 	umull	r0, r3, r3, r2
 800259e:	095b      	lsrs	r3, r3, #5
 80025a0:	2064      	movs	r0, #100	; 0x64
 80025a2:	fb00 f303 	mul.w	r3, r0, r3
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	011b      	lsls	r3, r3, #4
 80025aa:	3332      	adds	r3, #50	; 0x32
 80025ac:	4a15      	ldr	r2, [pc, #84]	; (8002604 <UART_SetConfig+0x118>)
 80025ae:	fba2 2303 	umull	r2, r3, r2, r3
 80025b2:	095b      	lsrs	r3, r3, #5
 80025b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025b8:	4419      	add	r1, r3
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	4613      	mov	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4413      	add	r3, r2
 80025c2:	009a      	lsls	r2, r3, #2
 80025c4:	441a      	add	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80025d0:	4b0c      	ldr	r3, [pc, #48]	; (8002604 <UART_SetConfig+0x118>)
 80025d2:	fba3 0302 	umull	r0, r3, r3, r2
 80025d6:	095b      	lsrs	r3, r3, #5
 80025d8:	2064      	movs	r0, #100	; 0x64
 80025da:	fb00 f303 	mul.w	r3, r0, r3
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	011b      	lsls	r3, r3, #4
 80025e2:	3332      	adds	r3, #50	; 0x32
 80025e4:	4a07      	ldr	r2, [pc, #28]	; (8002604 <UART_SetConfig+0x118>)
 80025e6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ea:	095b      	lsrs	r3, r3, #5
 80025ec:	f003 020f 	and.w	r2, r3, #15
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	440a      	add	r2, r1
 80025f6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80025f8:	bf00      	nop
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40013800 	.word	0x40013800
 8002604:	51eb851f 	.word	0x51eb851f

08002608 <__libc_init_array>:
 8002608:	b570      	push	{r4, r5, r6, lr}
 800260a:	2600      	movs	r6, #0
 800260c:	4d0c      	ldr	r5, [pc, #48]	; (8002640 <__libc_init_array+0x38>)
 800260e:	4c0d      	ldr	r4, [pc, #52]	; (8002644 <__libc_init_array+0x3c>)
 8002610:	1b64      	subs	r4, r4, r5
 8002612:	10a4      	asrs	r4, r4, #2
 8002614:	42a6      	cmp	r6, r4
 8002616:	d109      	bne.n	800262c <__libc_init_array+0x24>
 8002618:	f000 f822 	bl	8002660 <_init>
 800261c:	2600      	movs	r6, #0
 800261e:	4d0a      	ldr	r5, [pc, #40]	; (8002648 <__libc_init_array+0x40>)
 8002620:	4c0a      	ldr	r4, [pc, #40]	; (800264c <__libc_init_array+0x44>)
 8002622:	1b64      	subs	r4, r4, r5
 8002624:	10a4      	asrs	r4, r4, #2
 8002626:	42a6      	cmp	r6, r4
 8002628:	d105      	bne.n	8002636 <__libc_init_array+0x2e>
 800262a:	bd70      	pop	{r4, r5, r6, pc}
 800262c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002630:	4798      	blx	r3
 8002632:	3601      	adds	r6, #1
 8002634:	e7ee      	b.n	8002614 <__libc_init_array+0xc>
 8002636:	f855 3b04 	ldr.w	r3, [r5], #4
 800263a:	4798      	blx	r3
 800263c:	3601      	adds	r6, #1
 800263e:	e7f2      	b.n	8002626 <__libc_init_array+0x1e>
 8002640:	080026a0 	.word	0x080026a0
 8002644:	080026a0 	.word	0x080026a0
 8002648:	080026a0 	.word	0x080026a0
 800264c:	080026a4 	.word	0x080026a4

08002650 <memset>:
 8002650:	4603      	mov	r3, r0
 8002652:	4402      	add	r2, r0
 8002654:	4293      	cmp	r3, r2
 8002656:	d100      	bne.n	800265a <memset+0xa>
 8002658:	4770      	bx	lr
 800265a:	f803 1b01 	strb.w	r1, [r3], #1
 800265e:	e7f9      	b.n	8002654 <memset+0x4>

08002660 <_init>:
 8002660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002662:	bf00      	nop
 8002664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002666:	bc08      	pop	{r3}
 8002668:	469e      	mov	lr, r3
 800266a:	4770      	bx	lr

0800266c <_fini>:
 800266c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800266e:	bf00      	nop
 8002670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002672:	bc08      	pop	{r3}
 8002674:	469e      	mov	lr, r3
 8002676:	4770      	bx	lr
